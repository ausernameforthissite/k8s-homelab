---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: immich-postgresql
  namespace: "immich"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.0.0
automountServiceAccountToken: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-postgresql-init-scripts
  namespace: "immich"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.0.0
data:
  create-extensions.sql: |
    CREATE EXTENSION cube;
    CREATE EXTENSION earthdistance;
    CREATE EXTENSION vectors;
---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgresql-hl
  namespace: "immich"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.0.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgresql
  namespace: "immich"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.0.0
    app.kubernetes.io/component: primary
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: immich-postgresql
  namespace: "immich"
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 17.0.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: immich-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: immich-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 17.0.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: immich-postgresql
      automountServiceAccountToken: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/component: primary
              topologyKey: kubernetes.io/hostname
            weight: 1
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
      - name: postgresql
        image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: "/bitnami/postgresql"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        # Authentication
        - name: POSTGRES_USER
          value: "immich"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-postgresql
              key: password
        - name: POSTGRES_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-postgresql
              key: postgres-password
        - name: POSTGRES_DATABASE
          value: "immich"
        # LDAP
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        # TLS
        - name: POSTGRESQL_ENABLE_TLS
          value: "no"
        # Audit
        - name: POSTGRESQL_LOG_HOSTNAME
          value: "false"
        - name: POSTGRESQL_LOG_CONNECTIONS
          value: "false"
        - name: POSTGRESQL_LOG_DISCONNECTIONS
          value: "false"
        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
          value: "off"
        # Others
        - name: POSTGRESQL_CLIENT_MIN_MESSAGES
          value: "error"
        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
          value: "pgaudit"
        ports:
        - name: tcp-postgresql
          containerPort: 5432
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "immich" -d "dbname=immich" -h 127.0.0.1 -p 5432
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "immich" -d "dbname=immich" -h 127.0.0.1 -p 5432
        resources:
          limits:
            cpu: 150m
            ephemeral-storage: 2Gi
            memory: 192Mi
          requests:
            cpu: 100m
            ephemeral-storage: 50Mi
            memory: 128Mi
        volumeMounts:
        - name: empty-dir
          mountPath: /tmp
          subPath: tmp-dir
        - name: empty-dir
          mountPath: /opt/bitnami/postgresql/conf
          subPath: app-conf-dir
        - name: empty-dir
          mountPath: /opt/bitnami/postgresql/tmp
          subPath: app-tmp-dir
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d/
        - name: dshm
          mountPath: /dev/shm
        - name: data
          mountPath: /bitnami/postgresql
      volumes:
      - name: empty-dir
        emptyDir: {}
      - name: custom-init-scripts
        configMap:
          name: immich-postgresql-init-scripts
      - name: dshm
        emptyDir:
          medium: Memory
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "8Gi"
