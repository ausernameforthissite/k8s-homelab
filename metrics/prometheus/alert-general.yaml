---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: alert-general
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: alert-general
    rules:
    - alert: TargetDown
      annotations:
        description: >-
          job {{ $labels.job }}:
          {{ $labels.instance }}
        summary: Target is unreachable
      expr: |-
        up{ok_to_be_missing!="true"} == 0
      for: 10m
      labels:
        severity: warning
    - alert: ServiceTargetsDown
      annotations:
        description: >-
          job {{ $labels.job }}:
          {{ $labels.namespace }}/{{ $labels.service }}:
          {{ $value | humanizePercentage }}
        summary: More than 10% of targets are unreachable
      expr: |-
        (
          count by (cluster_type, cluster, job, namespace, service) (up{namespace!="", service!=""} == 0)
          /
          count by (cluster_type, cluster, job, namespace, service) (up{namespace!="", service!=""})
        ) > 0
      for: 10m
      labels:
        severity: warning
    - alert: Watchdog
      annotations:
        description: 'This is an alert meant to ensure that the entire alerting pipeline is functional.
          This alert is always firing, therefore it should always be firing in Alertmanager
          and always fire against a receiver. There are integrations with various notification
          mechanisms that send a notification when this alert is not firing. For example the
          "DeadMansSnitch" integration in PagerDuty.
          '
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/watchdog
        summary: An alert that should always be firing to certify that Alertmanager is working properly.
      expr: vector(1)
      labels:
        severity: none
    - alert: InfoInhibitor
      annotations:
        description: 'This is an alert that is used to inhibit info alerts.
          By themselves, the info-level alerts are sometimes very noisy, but they are relevant when combined with
          other alerts.
          This alert fires whenever there''s a severity="info" alert, and stops firing when another alert with a
          severity of ''warning'' or ''critical'' starts firing on the same namespace.
          This alert should be routed to a null receiver and configured to inhibit alerts with severity="info".
          '
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/infoinhibitor
        summary: Info-level alert inhibition.
      expr: ALERTS{severity = "info"} == 1 unless on (namespace) ALERTS{alertname != "InfoInhibitor", severity =~ "warning|critical", alertstate="firing"} == 1
      labels:
        severity: none
    - alert: MismatchedClusterType
      annotations:
        description: >-
          {{ $labels.cluster }}: {{ $value }}
        summary: There are several metrics that define the same cluster name but different cluster type
      expr: count by(cluster) (count by(cluster, cluster_type) (up)) > 1
      labels:
        severity: info
    - alert: MismatchedClusterTypeDetails
      annotations:
        description: >-
          job {{ $labels.job }}, cluster {{ $labels.original_cluster }}, type {{ $labels.original_type }}
        summary: More details for MismatchedInstanceCluster alert
      expr: |
        (count by(job, original_cluster, original_type) (
          label_replace(label_replace(
            label_replace(label_replace(up, "original_type", "$1", "cluster_type", "(.*)"), "cluster_type", "", "cluster_type", ".*")
            and on(cluster)
            count by(cluster) (count by(cluster, cluster_type) (up)) > 1
          , "original_cluster", "$1", "cluster", "(.*)"), "cluster", "", "cluster", ".*"))
        )
      labels:
        severity: info
    - alert: MismatchedInstanceCluster
      annotations:
        description: >-
          {{ $labels.instance }}: {{ $value }}
        summary: There are several metrics from single instance that define different cluster value
      expr: count by(instance) (count by(cluster, instance) (up)) > 1
      labels:
        severity: info
    - alert: MismatchedInstanceClusterDetails
      annotations:
        description: >-
          job {{ $labels.job }}, cluster {{ $labels.original_cluster }}, instance {{ $labels.instance }}
        summary: More details for MismatchedInstanceCluster alert
      expr: |
        (count by(job, original_cluster, instance) (
          label_replace(label_replace(up, "original_cluster", "$1", "cluster", "(.*)"), "cluster", "", "cluster", ".*"))
        )
        and on(instance) 
        count by(instance) (group by(instance, cluster) (up)) > 1
      labels:
        severity: info
