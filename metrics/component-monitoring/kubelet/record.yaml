---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-container-cpu-usage-seconds-total
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-container-cpu-usage-seconds-total
    rules:
    - expr: |-
        sum by (cluster, namespace, pod, container) (
          irate(container_cpu_usage_seconds_total{}[5m])
        ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
          1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
        )
      record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-kubelet-pleg
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-kubelet-pleg
    rules:
    # scrape_interval == rule_evaluation_interval == 10s, therefore irate does not lose any samples
    # `irate[1m]` is much more precise than `rate[25s]`
    - record: kubelet_pleg_relist_duration_seconds:quantile_irate
      expr: |-
        histogram_quantile(0.99, irate(kubelet_pleg_relist_duration_seconds_bucket[1m]))
      labels:
        quantile: '0.99'
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-namespace-memory
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-memory
    rules:
    - record: namespace:container_memory_usage_bytes
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            container_memory_usage_bytes{}
          )
        )
    - record: namespace:container_memory_rss
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            container_memory_rss{}
          )
        )
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-namespace-cpu
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-cpu
    rules:
    - record: namespace:container_cpu_usage_seconds:irate
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            irate(container_cpu_usage_seconds_total{}[40s])
          )
        )
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-namespace-network
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-network
    rules:
    - record: namespace:container_network_receive_bytes:irate
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            irate(container_network_receive_bytes_total{}[40s])
          )
        )
    - record: namespace:container_network_transmit_bytes:irate
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            irate(container_network_transmit_bytes_total{}[40s])
          )
        )
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-container-time
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-network
    rules:
    - record: container_last_seen_time
      # this is a workaround for the issue that prometheus can't give you first and last timestamp of data vector
      # with this you can just use min_over_time(container_last_seen_time) and max_over_time(container_last_seen_time)
      expr: |-
        timestamp(container_start_time_seconds)
