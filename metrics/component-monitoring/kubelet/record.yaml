---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-container-cpu-usage-seconds-total
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-container-cpu-usage-seconds-total
    rules:
    - expr: |-
        sum by (cluster, namespace, pod, container) (
          irate(container_cpu_usage_seconds_total{}[5m])
        ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
          1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
        )
      record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-kubelet-pleg
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-kubelet-pleg
    rules:
    # scrape_interval == rule_evaluation_interval == 10s, therefore irate does not lose any samples
    # `irate[1m]` is much more precise than `rate[25s]`
    - record: kubelet_pleg_relist_duration_seconds:quantile_irate
      expr: |-
        histogram_quantile(0.99, irate(kubelet_pleg_relist_duration_seconds_bucket[1m]))
      labels:
        quantile: '0.99'
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-container-resource
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-container-resource
    rules:
    - expr: |-
        sum by (namespace, cluster) (
            sum by (namespace, pod, cluster) (
                max by (namespace, pod, container, cluster) (
                  kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"}
                ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                  kube_pod_status_phase{phase=~"Pending|Running"} == 1
                )
            )
        )
      record: namespace_memory:kube_pod_container_resource_requests:sum
    - expr: |-
        sum by (namespace, cluster) (
            sum by (namespace, pod, cluster) (
                max by (namespace, pod, container, cluster) (
                  kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"}
                ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                  kube_pod_status_phase{phase=~"Pending|Running"} == 1
                )
            )
        )
      record: namespace_cpu:kube_pod_container_resource_requests:sum
    - expr: |-
        sum by (namespace, cluster) (
            sum by (namespace, pod, cluster) (
                max by (namespace, pod, container, cluster) (
                  kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"}
                ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                  kube_pod_status_phase{phase=~"Pending|Running"} == 1
                )
            )
        )
      record: namespace_memory:kube_pod_container_resource_limits:sum
    - expr: |-
        sum by (namespace, cluster) (
            sum by (namespace, pod, cluster) (
                max by (namespace, pod, container, cluster) (
                  kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"}
                ) * on (namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (
                  kube_pod_status_phase{phase=~"Pending|Running"} == 1
                )
            )
        )
      record: namespace_cpu:kube_pod_container_resource_limits:sum
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: recording-k8s-pod-owner-relabel
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: recording-k8s-pod-owner-relabel
    rules:
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          label_replace(
            label_replace(
              kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"},
              "replicaset", "$1", "owner_name", "(.*)"
            ) * on (replicaset, namespace) group_left(owner_name) topk by (replicaset, namespace) (
              1, max by (replicaset, namespace, owner_name) (
                kube_replicaset_owner{job="kube-state-metrics"}
              )
            ),
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: deployment
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          label_replace(
            kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: daemonset
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          label_replace(
            kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: statefulset
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          label_replace(
            kube_pod_owner{job="kube-state-metrics", owner_kind="Job"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: job
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          label_replace(
            kube_pod_owner{job="kube-state-metrics", owner_kind="Node"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: static-pod
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          label_replace(
            kube_pod_owner{job="kube-state-metrics", owner_kind="Cluster"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: cnpg
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max by (cluster_type, cluster, namespace, workload, pod) (
          kube_pod_owner{job="kube-state-metrics", owner_kind=""}
        )
      labels:
        workload_type: free-pod
        workload: '-'
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-namespace-memory
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-memory
    rules:
    - record: namespace:container_memory_usage_bytes
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            container_memory_usage_bytes{}
          )
        )
    - record: namespace:container_memory_rss
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            container_memory_rss{}
          )
        )
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-namespace-cpu
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-cpu
    rules:
    - record: namespace:container_cpu_usage_seconds:irate
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            irate(container_cpu_usage_seconds_total{}[40s])
          )
        )
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-k8s-namespace-network
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-k8s-namespace-network
    rules:
    - record: namespace:container_network_receive_bytes:irate
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            irate(container_network_receive_bytes_total{}[40s])
          )
        )
    - record: namespace:container_network_transmit_bytes:irate
      expr: |-
        sum by (cluster_type, cluster, namespace) (
          # max by(container) should fix overlapping data on container restarts
          max by(cluster_type, cluster, namespace, pod, container) (
            irate(container_network_transmit_bytes_total{}[40s])
          )
        )
