---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  name: kubelet-main
  namespace: prometheus
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  kubernetesSDConfigs:
  - role: Node
  scheme: HTTPS
  metricsPath: /metrics
  tlsConfig:
    ca:
      configMap:
        name: kube-root-ca.crt
        key: ca.crt
  authorization:
    credentials:
      name: prometheus-sa-token
      key: token
  honorLabels: true
  honorTimestamps: true
  trackTimestampsStaleness: true
  relabelings:
  - targetLabel: job
    replacement: kubelet-main
    action: replace
  - targetLabel: cluster_type
    replacement: k8s
    action: replace
  metricRelabelings:
  - action: keep
    sourceLabels: [ __name__ ]
    regex: "\
      kubelet_node_name|\
      kubernetes_feature_enabled|\
      kubernetes_build_info|\
      kubelet_active_pods|\
      kubelet_certificate_.*|\
      kubelet_server_expiration_renew_errors|\
      kubelet_desired_pods|\
      kubelet_running_pods|\
      kubelet_working_pods|\
      kubelet_container_log_filesystem_used_bytes|\
      kubelet_pod_worker_.*|\
      kubelet_volume_stats.*|\
      kubelet_pleg_.*|\
      kubelet_evented_pleg_.*|\
      "
---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  name: kubelet-cadvisor
  namespace: prometheus
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  kubernetesSDConfigs:
  - role: Node
  scheme: HTTPS
  metricsPath: /metrics/cadvisor
  tlsConfig:
    ca:
      configMap:
        name: kube-root-ca.crt
        key: ca.crt
  authorization:
    credentials:
      name: prometheus-sa-token
      key: token
  honorLabels: true
  honorTimestamps: true
  trackTimestampsStaleness: true
  relabelings:
  - targetLabel: job
    replacement: kubelet-cadvisor
    action: replace
  - targetLabel: cluster_type
    replacement: k8s
    action: replace
  - targetLabel: node
    sourceLabels: [ instance ]
    action: replace
  metricRelabelings:
  # drop metrics for dummy cgroup containers without name
  - sourceLabels:
    - __name__
    - container
    action: keep
    # for network metrics keep all
    # for other metrics drop everything without container label
    # this way we also delete all of the container_fs per-device metrics without container context
    regex: .*;.+|container_network_.*;.*
    separator: ;
  - sourceLabels:
    - __name__
    - interface
    action: drop
    # drop lxc* interface metrics
    # ideally you would want to drop all network metrics for hostNetwork pods
    # but at least we can guard prometheus from network metric explosion with lxc interfaces
    regex: container_network_.*;lxc.*
    separator: ;
  # iops metrics don't seems to be useful ?
  # - sourceLabels: [__name__]
  #   action: drop
  #   regex: 'container_fs_reads_total|container_fs_writes_total'
  - sourceLabels: [__name__]
    action: drop
    # load average is useless?
    # it can spike when doing many IO operations
    regex: container_cpu_load_average_10s|container_cpu_load_d_average_10s
  - sourceLabels: [__name__]
    action: drop
    # container_memory_failcnt is always zero, because when using memory.oom.group=1 container is OOM-killed before allocation fail happens
    # container_oom_events_total is always zero because when OOM happens, a new container is created, and the old is deleted
    regex: container_memory_failcnt|container_oom_events_total
  - sourceLabels: [__name__]
    action: drop
    # container_memory_kernel_usage is always zero
    #     It seems like cadvisor embedded in k8s 1.32 does not know how to handle kernel and kernel_stack from memory.stat in cgroup v2?
    # container_memory_swap is always zero because swap is not used on k8s nodes
    regex: container_memory_swap|container_memory_kernel_usage
  # - sourceLabels: [__name__]
  #   action: drop
  #   # container_processes, container_threads and container_sockets are gauges, which severely limits its usefulness
  #   regex: container_processes|container_threads|container_sockets
  # - sourceLabels: [__name__]
  #   action: drop
  #   # container_spec_memory_reservation_limit_bytes is always zero because k8s sets neither memory.min not memory.low
  #   #     https://github.com/kubernetes/kubernetes/issues/131077
  #   regex: container_spec_memory_reservation_limit_bytes
  - sourceLabels: [__name__]
    action: drop
    # container_spec_memory_swap_limit_bytes is always zero because swap is not used on k8s nodes
    regex: container_spec_memory_swap_limit_bytes
  - sourceLabels: [__name__]
    action: drop
    # container_tasks_state is always zero. Additionally, it's a gauge, so it's useless
    #   https://github.com/google/cadvisor/issues/2739
    regex: container_tasks_state
  # # Drop cgroup metrics with no pod.
  # - sourceLabels: [id, pod]
  #   action: drop
  #   regex: '.+;'
  - sourceLabels: [ __name__, scope ]
    action: drop
    # container_memory_failures_total{scope="container"} == container_memory_failures_total{scope="hierarchy"}
    regex: container_memory_failures_total;hierarchy
    separator: ;
    # extract pod UID from container id path
    # old format:
    # id="/kubepods.slice/kubepods-burstable.slice/kubepods-burstable-pod7d4659dd_816c_47d3_a7af_5497cd907f03.slice/cri-containerd-2deaac380080854057af38e6d109e8c6561c561011c22d854e31afcde3eb7fc9.scope"
    # new format:
    # id="/kubepods/burstable/pod00183d57-cc1e-425d-adfa-96844aceb81d/240f7c1de56c2f846123a3a97dfb395f35ad72167a79a1a07e8c50e1f08451c9"
    # note that for static pods the id field does not correspond to pod uid. For example:
    # id="/kubepods.slice/kubepods-burstable.slice/kubepods-burstable-pod2a26a30123a101c567ba870dc0a74eb3.slice/cri-containerd-42f2362e50d4ec6312477b88473fe1271de144f6f83a0e8ad2579f260ca535ad.scope"
  - targetLabel: uid
    sourceLabels: [ id ]
    action: replace
    regex: '/kubepods.slice/.*\.slice/.*-pod([0-9a-z_]*)\.slice/cri-.*'
  - targetLabel: uid
    sourceLabels: [ id ]
    regex: '/kubepods/.*/pod([0-9a-z-]*)/.*'
    action: replace
  - targetLabel: uid
    sourceLabels: [ uid ]
    regex: (.*)_(.*)
    replacement: '$1-$2'
    action: replace
  - targetLabel: uid
    sourceLabels: [ uid ]
    regex: (.*)_(.*)
    replacement: '$1-$2'
    action: replace
  - targetLabel: uid
    sourceLabels: [ uid ]
    regex: (.*)_(.*)
    replacement: '$1-$2'
    action: replace
  - targetLabel: uid
    sourceLabels: [ uid ]
    regex: (.*)_(.*)
    replacement: '$1-$2'
    action: replace
  - targetLabel: uid
    sourceLabels: [ uid ]
    regex: (.*)_(.*)
    replacement: '$1-$2'
    action: replace
  - targetLabel: uid
    sourceLabels: [ uid ]
    regex: (.*)_(.*)
    replacement: '$1-$2'
    action: replace
# ---
# apiVersion: monitoring.coreos.com/v1alpha1
# kind: ScrapeConfig
# metadata:
#   name: kubelet-probes
#   namespace: prometheus
#   labels:
#     prometheus.io/instance: main
#     instance.prometheus.io/main: enable
#     instance.prometheus.io/prompp: enable
# spec:
#   kubernetesSDConfigs:
#   - role: Node
#   scheme: HTTPS
#   metricsPath: /metrics/probes
#   tlsConfig:
#     ca:
#       configMap:
#         name: kube-root-ca.crt
#         key: ca.crt
#   authorization:
#     credentials:
#       name: prometheus-sa-token
#       key: token
#   honorLabels: true
#   honorTimestamps: true
#   relabelings:
#   # - action: labeldrop
#   #   regex: endpoint|instance
#   - targetLabel: job
#     replacement: kubelet-probes
