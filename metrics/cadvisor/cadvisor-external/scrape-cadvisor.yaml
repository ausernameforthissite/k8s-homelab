---
apiVersion: monitoring.coreos.com/v1alpha1
kind: ScrapeConfig
metadata:
  name: cadvisor-external
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  scheme: HTTP
  scrapeTimeout: 1s
  relabelings:
  - targetLabel: instance
    sourceLabels: [ __address__ ]
    regex: (.*):\d*
    action: replace
  - action: replace
    targetLabel: job
    replacement: cadvisor
  metricRelabelings:
  # - action: labeldrop
  #   regex: instance
  - targetLabel: container
    sourceLabels: [ container_label_io_kubernetes_container_name ]
    action: replace
  - targetLabel: pod
    sourceLabels: [ container_label_io_kubernetes_pod_name ]
    action: replace
  - targetLabel: namespace
    sourceLabels: [ container_label_io_kubernetes_pod_namespace ]
    action: replace
  - action: labeldrop
    regex: container_label_io_kubernetes_container_name|container_label_io_kubernetes_pod_name|container_label_io_kubernetes_pod_namespace
  - sourceLabels: [ __name__, device ]
    action: drop
    # drop device metrics without device specified
    regex: container_blkio_device_usage_total;
    separator: ;
  - sourceLabels: [ __name__, device ]
    action: drop
    # drop device metrics without device specified
    regex: container_fs_.+;
    separator: ;
  - targetLabel: image
    # Remove image from network metrics.
    #   All containers share network namespace,
    #   but labels point to sandbox container.
    # We need to do this to avoid dropping these metrics below, along with other sandbox metrics
    sourceLabels: [ __name__ ]
    action: replace
    regex: container_network_.+
    replacement: ''
  - sourceLabels: [ pod, container, image ]
    action: drop
    # drop metrics for sandbox containers
    # - pod is not empty
    # - container is empty
    # - image contains "pause"
    regex: .+;;.*pause.*
    separator: ;
  - sourceLabels: [ __name__, interface ]
    action: drop
    # drop lxc* interface metrics
    # ideally you would want to drop all network metrics for hostNetwork pods
    # but at least we can guard prometheus from metric explosion with lxc interfaces
    regex: container_network_.*;lxc.*
    separator: ;
  - sourceLabels: [ __name__ ]
    action: drop
    # container_memory_failcnt is always zero, because when using memory.oom.group=1 container is OOM-killed before allocation fail happens
    # container_oom_events_total is always zero because when OOM happens, a new container is created, and the old is deleted
    regex: container_memory_failcnt|container_oom_events_total
  - sourceLabels: [ __name__ ]
    action: drop
    # container_memory_kernel_usage is always zero
    #     It seems like cadvisor does not know how to handle kernel and kernel_stack from memory.stat in cgroup v2?
    # container_memory_swap is always zero because swap is not used on k8s nodes
    regex: container_memory_swap|container_memory_kernel_usage
  - sourceLabels: [ __name__ ]
    action: drop
    # container_processes, container_threads and container_sockets are gauges, which severely limits its usefulness
    regex: container_processes|container_threads|container_sockets
  - sourceLabels: [__name__]
    action: drop
  #   # container_spec_memory_reservation_limit_bytes is always zero because k8s sets neither memory.min not memory.low
  #   #     https://github.com/kubernetes/kubernetes/issues/131077
    regex: container_spec_memory_reservation_limit_bytes
  - sourceLabels: [ __name__ ]
    action: drop
    # container_spec_memory_swap_limit_bytes is always zero because swap is not used on k8s nodes
    regex: container_spec_memory_swap_limit_bytes
  - sourceLabels: [ __name__ ]
    action: drop
    # container_tasks_state is always zero. Additionally, it's a gauge, so it's useless
    #   https://github.com/google/cadvisor/issues/2739
    regex: container_tasks_state
  - sourceLabels: [ __name__ ]
    action: drop
    # container_network_receive_packets_dropped_total is always zero
    # container_network_transmit_packets_dropped_total is almost always zero. When it's not zero, it's rate is very close to zero. It does not seem useful
    regex: container_network_receive_packets_dropped_total|container_network_transmit_packets_dropped_total
  - sourceLabels: [ __name__, scope ]
    action: drop
    # container_memory_failures_total{scope="container"} == container_memory_failures_total{scope="hierarchy"}
    regex: container_memory_failures_total;hierarchy
    separator: ;
  - sourceLabels: [ __name__ ]
    action: drop
    # container_memory_failures_total{scope="container"} == container_memory_failures_total{scope="hierarchy"}
    regex: go_.*|process_.*
