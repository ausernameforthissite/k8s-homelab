
.message = to_string!(.message)

if contains(.message, "[0m") {
  .message = strip_ansi_escape_codes(.message)
}

.original_message = .message

if false {
  null
} else if (structured, err = parse_json(.message); err == null) {
  .log = structured
  .log_type = "json"
} else if (structured, err = parse_glog(.message); err == null) {
  # example: I20210131 14:48:54.411655 15520 main.c++:9] Hello world!
  .log = structured
  .log_type = "glog"
} else if (structured, err = parse_klog(.message); err == null) {
  # k8s golang standard logs
  # example: W0513 19:49:05.176235 1 warnings.go:70] v1 Endpoints is deprecated in v1.33+; use discovery.k8s.io/v1 EndpointSlice
  .log = structured
  .log_type = "klog"
} else if (structured, err = parse_syslog(.message); err == null) {
  # example: 1 2020-03-13T20:45:38.119Z dynamicwireless.name non 2426 ID931 [exampleSDID@32473 iut="3" eventSource= "Application" eventID="1011"] Try to override the THX port, maybe it will reboot the neural interface!
  .log = structured
  .log_type = "syslog"
} else if (structured, err = parse_nginx_log(.message, "combined"); err == null) {
  # example: 172.17.0.1 - alice [01/Apr/2021:12:02:31 +0000] "POST /not-found HTTP/1.1" 404 153 "http://localhost/somewhere" "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" "2.75"
  .log = structured
  .log_type = "nginx"
} else if (structured, err = parse_common_log(.message); err == null) {
  # example: 127.0.0.1 bob frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326
  .log = structured
  .log_type = "common_log"
} else if (structured, err = parse_regex(.message, r'^\[(?<timestamp>.*?\])\s+(?<level>[A-Z])\s+\[(?<component>.*?)\]\s+(?<logger>[^ ]+)\s*\|\s*(?<file>[^:]+):(?<line>\d+)\s*\|\s*(?<msg>.*)$'); err == null) {
  # OME log format
  # example: [2025-05-13 20:23:27.775] I [SPAPISvr-t8081:38] HTTP.Server | http_server.cpp:149 | Client(<ClientSocket: 0x7fc8af201610, #20, Connected, TCP, Nonblocking, 10.201.3.169:55572>) is connected on *:8081
  .log = structured
  .log_type = "ome"
} else if (structured, err = parse_regex(.message, r'^(?<timestamp>\d[\d\-:,. ]*)\s+(?<level>[a-zA-Z]+):\s*(?<msg>.*)$'); err == null) {
  # Python log format
  # example: 2025-05-13 20:48:19,087 INFO: no action. I am (postgres-0), a secondary, and following a leader (postgres-1)
  .log = structured
  .log_type = "ome"
} else if (structured, err = parse_regex(.message, r'^\[(?<time>\d{2}:\d{2}:\d{2})\] \[(?<level>[A-Z]+)\] \[(?<task_id>\d+)\] (?<component>[^:]+): (?<msg>.+)$'); err == null) {
  # .NET log format
  # example: [10:05:28] [INF] [31] MediaBrowser.MediaEncoding.Transcoding.TranscodeManager: FFmpeg exited with code 0
  .log = structured
  .log_type = "dotnet"
} else if (structured, err = parse_regex(.message, r'\[(?<level>[A-Z]+)\]\s+(?<client_ip>[\d\.]+):(?<client_port>\d+)\s+-\s+(?<dns_id>\d+)\s+"(?<msg>[^"]+)"\s+(?<rcode>\S+)\s+(?<flags>[^ ]+)\s+(?<response_size>\d+)\s+(?<duration>[\d\.]+)s'); err == null) {
  # CoreDNS log format
  # example: [INFO] 10.3.0.2:49032 - 5131 "A IN grafana-public.example.com. udp 59 false 1232" NOERROR qr,aa,rd 94 0.000142874s
  .log = structured
  .log_type = "coredns"
  query_tokens, err = parse_tokens(.log.msg)
  if err == null && length(query_tokens) == 7 {
    .log.query = {
      "type": query_tokens[0],
      "class": query_tokens[1],
      "domain": query_tokens[2],
      "protocol": query_tokens[3],
      "size": to_int(query_tokens[4]) ?? -1,
      "dnssec": query_tokens[5] == "true",
      "buf_size": to_int(query_tokens[6]) ?? -1,
    }
  }
} else if (structured, err = parse_key_value(.message); err == null && contains(.message, "=")) {
  # example: @timestamp="Sun Jan 10 16:47:39 EST 2021" level=info msg="Stopping all fetchers" tag#production=stopping_fetchers id=ConsumerFetcherManager-1382721708341 module=kafka.consumer.ConsumerFetcherManager
  # key-value is the last in the list because it seems like it catches almost any log type,
  # by just assigning each space-separated word "qwe" value qwe=true
  # let's try to sanitize it a little by checking if at least one '=' exists
  .log = structured
  .log_type = "key_value"
} else {
  .log = "parsing failed"
}

if starts_with(string(.kubernetes.pod_owner) ?? "", "Cluster/") && exists(.log.msg) && .log.msg == "record" && exists(.log.record) {
  # handle CNPG logs
  # example: {"level":"info","ts":"2025-05-13T22:03:25.01250595Z","logger":"postgres","msg":"record","logging_pod":"nextcloud-cnpg-2","record":{"log_time":"2025-05-13 22:03:25.012 UTC","process_id":"39","session_id":"6823905f.27","session_line_num":"127","session_start_time":"2025-05-13 18:33:03 UTC","transaction_id":"0","error_severity":"LOG","sql_state_code":"00000","message":"restartpoint starting: time","backend_type":"checkpointer","query_id":"0"}}
  if exists(.log.record.message) && is_string(.log.record.message) && exists(.log.record.detail) && is_string(.log.record.detail) {
    .message = string!(.log.record.message) + ": " + string!(.log.record.detail)
  } else if exists(.log.record.message) {
    .message = .log.record.message
  } else {
    .message = .log.record
  }
} else if exists(.log.message) {
  .message = .log.message
} else if exists(.log.msg) {
  .message = .log.msg
} else {
  .message = .original_message
}

.level_raw = downcase(to_string!(.log.level))
.level = 
  if false {
    ""
  } else if .level_raw == "t" || .level_raw == "trc" || .level_raw == "trac" || .level_raw == "trace" {
    "trace"
  } else if .level_raw == "v" || .level_raw == "vrb" || .level_raw == "verb" || .level_raw == "verbose" {
    "verbose"
  } else if .level_raw == "d" || .level_raw == "dbg" || .level_raw == "debu" || .level_raw == "debug" {
    "debug"
  } else if .level_raw == "i" || .level_raw == "inf" || .level_raw == "info" {
    "info"
  } else if .level_raw == "w" || .level_raw == "wrn" || .level_raw == "warn" || .level_raw == "warning" {
    "warning"
  } else if .level_raw == "e" || .level_raw == "err" || .level_raw == "erro" || .level_raw == "error" {
    "error"
  } else if .level_raw == "c" || .level_raw == "crt" || .level_raw == "crit" || .level_raw == "critical" {
    "critical"
  } else if .level_raw == "f" || .level_raw == "ftl" || .level_raw == "fata" || .level_raw == "fatal" {
    "fatal"
  } else {
    ""
  }
if .level_raw == "" && exists(.log.v) {
  verbosity, err = int(.log.v)
  if err == null {
    .level_raw = .log.v
    # this is tuned to OpenKruise log levels
    if false {
      null
    } else if verbosity < 0 {
        .level = "warn"
    } else if verbosity == 0 {
        .level = "info"
    } else if verbosity <= 4 {
        .level = "debug"
    } else if verbosity <= 8 {
        .level = "verbose"
    } else {
        .level = "trace"
    }
  }
}
status_code = 0
if exists(.log.response_code) {
  status_code = int(.log.response_code) ?? 0
} else if exists(.log.status) {
  status_code = int(.log.status) ?? 0
}
if .level == "" && status_code != 0 {
  .level_raw = "status_code=" + to_string(status_code)
  if status_code >= 500 {
    .level = "error"
  } else if status_code >= 400 {
    .level = "warning"
  } else {
    .level = "info"
  }
}
if .level == "" {
  .level = .level_raw
  .level_type = "unknown"
}
# sometimes .level_raw is empty
if .level == "" {
  .level = "unknown"
}
