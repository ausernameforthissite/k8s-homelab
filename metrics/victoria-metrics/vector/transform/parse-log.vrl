
if false {
  null
} else if (structured, err = parse_json(.message); err == null) {
  .log = structured
  .log_type = "json"
} else if (structured, err = parse_glog(.message); err == null) {
  # example: I20210131 14:48:54.411655 15520 main.c++:9] Hello world!
  .log = structured
  .log_type = "glog"
} else if (structured, err = parse_klog(.message); err == null) {
  # k8s golang standard logs
  # example: W0513 19:49:05.176235 1 warnings.go:70] v1 Endpoints is deprecated in v1.33+; use discovery.k8s.io/v1 EndpointSlice
  .log = structured
  .log_type = "klog"
} else if (structured, err = parse_syslog(.message); err == null) {
  # example: 1 2020-03-13T20:45:38.119Z dynamicwireless.name non 2426 ID931 [exampleSDID@32473 iut="3" eventSource= "Application" eventID="1011"] Try to override the THX port, maybe it will reboot the neural interface!
  .log = structured
  .log_type = "syslog"
} else if (structured, err = parse_nginx_log(.message, "combined"); err == null) {
  # example: 172.17.0.1 - alice [01/Apr/2021:12:02:31 +0000] "POST /not-found HTTP/1.1" 404 153 "http://localhost/somewhere" "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36" "2.75"
  .log = structured
  .log_type = "nginx"
} else if (structured, err = parse_common_log(.message); err == null) {
  # example: 127.0.0.1 bob frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326
  .log = structured
  .log_type = "common_log"
} else if (structured, err = parse_regex(.message, r'^\[(?<timestamp>.*?\])\s+(?<level>[A-Z])\s+\[(?<component>.*?)\]\s+(?<logger>[^ ]+)\s*\|\s*(?<file>[^:]+):(?<line>\d+)\s*\|\s*(?<msg>.*)$'); err == null) {
  # OME log format
  # example: [2025-05-13 20:23:27.775] I [SPAPISvr-t8081:38] HTTP.Server | http_server.cpp:149 | Client(<ClientSocket: 0x7fc8af201610, #20, Connected, TCP, Nonblocking, 10.201.3.169:55572>) is connected on *:8081
  .log = structured
  .log_type = "ome"
} else if (structured, err = parse_regex(.message, r'^(?<timestamp>\d[\d\-:,. ]*)\s+(?<level>[a-zA-Z]+):\s*(?<msg>.*)$'); err == null) {
  # Python log format
  # example: 2025-05-13 20:48:19,087 INFO: no action. I am (postgres-0), a secondary, and following a leader (postgres-1)
  .log = structured
  .log_type = "python"
} else if (structured, err = parse_regex(.message, r'^\[(?<time>\d{2}:\d{2}:\d{2})\] \[(?<level>[A-Z]+)\] \[(?<task_id>\d+)\] (?<component>[^:]+): (?<msg>.+)$'); err == null) {
  # .NET log format
  # example: [10:05:28] [INF] [31] MediaBrowser.MediaEncoding.Transcoding.TranscodeManager: FFmpeg exited with code 0
  .log = structured
  .log_type = "dotnet"
} else if (structured, err = parse_regex(.message, r'^\[(?<ts>\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\.\d*)\]\[(?<level>[A-Z]+)\]\[(?<worker>\d+)\]\[(?<trace>[^\]]+)\]\s+(?<rest>.*)$'); err == null) {
  # SRS log format
  # example: [2025-07-23 07:06:29.469][INFO][1][6qesxl83] HTTP #0 10.3.10.16:59922 GET http://10.3.131.62:8080/, content-length=-1
  .log = structured
  .log_type = "srs"
} else if (structured, err = parse_regex(.message, r'^(?<ts>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)\t(?<level>\w+)\t(?<logger>[^\t]+)\t(?<msg>.*)$'); err == null) {
  # Golang Zap logger format
  # example: 2025-07-23T04:43:34.890216Z	error	controllers	error handling gateways/main-private
  .log = structured
  .log_type = "zap"
} else if (structured, err = parse_regex(.message, r'\[(?<level>[A-Z]+)\]\s+(?<client_ip>[\d\.]+):(?<client_port>\d+)\s+-\s+(?<dns_id>\d+)\s+"(?<msg>[^"]+)"\s+(?<rcode>\S+)\s+(?<flags>[^ ]+)\s+(?<response_size>\d+)\s+(?<duration>[\d\.]+)s'); err == null) {
  # CoreDNS log format
  # example: [INFO] 10.3.0.2:49032 - 5131 "A IN grafana-public.example.com. udp 59 false 1232" NOERROR qr,aa,rd 94 0.000142874s
  .log = structured
  .log_type = "coredns"
  query_tokens, err = parse_tokens(.log.msg)
  if err == null && length(query_tokens) == 7 {
    .log.query = {
      "type": query_tokens[0],
      "class": query_tokens[1],
      "domain": query_tokens[2],
      "protocol": query_tokens[3],
      "size": to_int(query_tokens[4]) ?? -1,
      "dnssec": query_tokens[5] == "true",
      "buf_size": to_int(query_tokens[6]) ?? -1,
    }
  }
} else if (structured, err = parse_key_value(.message); err == null) {
  # example: @timestamp="Sun Jan 10 16:47:39 EST 2021" level=info msg="Stopping all fetchers" tag#production=stopping_fetchers id=ConsumerFetcherManager-1382721708341 module=kafka.consumer.ConsumerFetcherManager
  # key-value is the last in the list because it seems like it catches almost any log type,
  # by just assigning each space-separated word "qwe" value qwe=true
  # let's try to sanitize it

  true_value_count = 0
  all_keys_are_valid = true
  for_each(structured) -> |_index, value| {
    if value == true {
      true_value_count = true_value_count + 1
    }
    if match(_index, r',|\[|]|\{|}|\(|\)|:|"|;|\?|&|\#|<|>|\*|~|%|`|\\|\t|\s|^0x[a-zA-Z0-9]+') {
      all_keys_are_valid = false
    }
    if match(_index, r'^[0-9]$') {
      all_keys_are_valid = false
    }
    if contains(_index, "'") {
      all_keys_are_valid = false
    }
    if starts_with(_index, "-") || ends_with(_index, "-") {
      all_keys_are_valid = false
    }
    if _index == "and" || _index == "a" || _index == "an" || _index == "the" || _index == "not" {
      all_keys_are_valid = false
    }
    
    if is_string(value) && ends_with(to_string(value) ?? "", ",") {
      all_keys_are_valid = false
    }
  }

  if (all_keys_are_valid && (true_value_count < 4 || true_value_count < length(structured) * 0.5)) {
    .log = structured
    .log_type = "key_value"
  }
}

if !exists(.log_type) {
  .log = "parsing failed"
  .log_type = "unknown"
}
