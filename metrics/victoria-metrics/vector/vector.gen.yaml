---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  namespace: "victoria-metrics"
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
automountServiceAccountToken: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector
  namespace: "victoria-metrics"
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
data:
  vector.yaml: |
    api:
      address: 0.0.0.0:8686
      enabled: true
      playground: true
    data_dir: /vector-data-dir
    sinks:
      exporter:
        address: 0.0.0.0:9090
        inputs:
        - internal_metrics
        type: prometheus_exporter
      vlogs:
        api_version: v8
        compression: zstd
        endpoints:
        - http://vlogs-server-0.vlogs-server.victoria-metrics.svc.cluster.local.:9428/insert/elasticsearch
        healthcheck:
          enabled: false
        inputs:
        - parser
        mode: bulk
        request:
          headers:
            AccountID: "0"
            ProjectID: "0"
            VL-Msg-Field: message
            VL-Stream-Fields: stream,kubernetes.pod_namespace,kubernetes.pod_name,kubernetes.container_name
            VL-Time-Field: timestamp
        type: elasticsearch
    sources:
      internal_metrics:
        type: internal_metrics
      k8s:
        ingestion_timestamp_field: .ingest_timestamp
        node_annotation_fields:
          node_labels: ""
        type: kubernetes_logs
    transforms:
      parser:
        inputs:
        - k8s
        source: ".original_message = .message\n# parse_json: JSON\n# parse_key_value:
          qwe=asd\n# parse_glog: I20210131 14:48:54.411655 15520 main.c++:9] Hello world!\n#
          parse_syslog: 1 2020-03-13T20:45:38.119Z dynamicwireless.name non 2426 ID931
          [exampleSDID@32473 iut=\"3\" eventSource= \"Application\" eventID=\"1011\"]
          Try to override the THX port, maybe it will reboot the neural interface!\n#
          parse_common_log: 127.0.0.1 bob frank [10/Oct/2000:13:55:36 -0700] \\\"GET /apache_pb.gif
          HTTP/1.0\\\" 200 2326\n.log = \n  parse_json(.message) ??\n  parse_key_value(.message)
          ??\n  parse_glog(.message) ??\n  parse_syslog(.message) ??\n  parse_common_log(.message)
          ??\n  \"parsing failed\"\n\nif starts_with(string!(.kubernetes.pod_owner), \"Cluster/\")
          && .log.msg == \"record\" && exists(.log.record) {\n  # handle CNPG logs\n  if
          exists(.log.record.message) && exists(.log.record.detail) {\n    .message =
          string!(.log.record.message) + \": \" + string!(.log.record.detail)\n  } else
          if exists(.log.record.message) {\n    .message = .log.record.message\n  } else
          {\n    .message = .log.record\n  }\n} else if exists(.log.message) {\n  .message
          = .log.message\n} else if exists(.log.msg) {\n  .message = .log.msg\n}\n"
        type: remap
---
# Permissions to use Kubernetes API.
# Requires that RBAC authorization is enabled.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vector
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
    verbs:
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vector
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vector
subjects:
  - kind: ServiceAccount
    name: vector
    namespace: "victoria-metrics"
---
apiVersion: v1
kind: Service
metadata:
  name: vector-headless
  namespace: "victoria-metrics"
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
  annotations:
spec:
  clusterIP: None
  ports:    
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    - name: exporter
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: vector
  namespace: "victoria-metrics"
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
  annotations:
spec:
  ports:    
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    - name: exporter
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
  type: ClusterIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  namespace: "victoria-metrics"
  labels:
    app.kubernetes.io/name: vector
    app.kubernetes.io/component: Agent
    
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vector
      app.kubernetes.io/component: Agent
  minReadySeconds: 0
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: vector
        app.kubernetes.io/component: Agent
        vector.dev/exclude: "true"
    spec:
      serviceAccountName: vector
      dnsPolicy: ClusterFirst
      containers:
        - name: vector
          image: "timberio/vector:0.46.1-distroless-libc"
          imagePullPolicy: IfNotPresent
          args:
            - --watch-config
            - --config-dir=/etc/vector/
          env:
            - name: VECTOR_LOG
              value: "info"
            - name: VECTOR_SELF_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: VECTOR_SELF_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VECTOR_SELF_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROCFS_ROOT
              value: "/host/proc"
            - name: SYSFS_ROOT
              value: "/host/sys"
          ports:      
            - name: api
              containerPort: 8686
              protocol: TCP
            - name: exporter
              containerPort: 9090
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: "/vector-data-dir"
            - name: config
              mountPath: "/etc/vector/"
              readOnly: true
            - mountPath: /var/log/
              name: var-log
              readOnly: true
            - mountPath: /var/lib
              name: var-lib
              readOnly: true
            - mountPath: /host/proc
              name: procfs
              readOnly: true
            - mountPath: /host/sys
              name: sysfs
              readOnly: true
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      volumes:
        - name: config
          projected:
            sources:
              - configMap:
                  name: vector
        - name: data
          hostPath:
            path: "/var/lib/vector"
        - hostPath:
            path: /var/log/
          name: var-log
        - hostPath:
            path: /var/lib/
          name: var-lib
        - hostPath:
            path: /proc
          name: procfs
        - hostPath:
            path: /sys
          name: sysfs
