---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:    
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: kube-state-metrics
    release: kps
  name: kube-state-metrics
  namespace: kps-ksm
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:    
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: kube-state-metrics
    release: kps
  name: kube-state-metrics
rules:
- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]
- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]
- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:    
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: kube-state-metrics
    release: kps
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: kps-ksm
---
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: kps-ksm
  labels:    
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: kube-state-metrics
    release: kps
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080
  - name: "metrics"
    protocol: TCP
    port: 8081
    targetPort: 8081
  selector:    
    app.kubernetes.io/name: kube-state-metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: kps-ksm
  labels:    
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: kube-state-metrics
    release: kps
spec:
  selector:
    matchLabels:      
      app.kubernetes.io/name: kube-state-metrics
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:        
        app.kubernetes.io/component: metrics
        app.kubernetes.io/name: kube-state-metrics
        release: kps
    spec:
      hostNetwork: false
      serviceAccountName: kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: kube-state-metrics
        args:
        - --port=8080
        - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
        imagePullPolicy: IfNotPresent
        image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
        ports:
        - containerPort: 8080
          name: "http"
        - containerPort: 8081
          name: "metrics"
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kube-state-metrics
  namespace: kps-ksm
  labels:    
    app.kubernetes.io/component: metrics
    app.kubernetes.io/name: kube-state-metrics
    release: kps
spec:
  jobLabel: app.kubernetes.io/name  
  selector:
    matchLabels:      
      app.kubernetes.io/name: kube-state-metrics
  endpoints:
    - port: http
      honorLabels: true
      relabelings:
        - action: replace
          regex: ^(.*)$
          replacement: $1
          separator: ;
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: nodename
    - port: metrics
      honorLabels: true
      relabelings:
        - action: replace
          regex: ^(.*)$
          replacement: $1
          separator: ;
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: nodename
