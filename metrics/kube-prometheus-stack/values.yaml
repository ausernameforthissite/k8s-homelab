---

nameOverride: kps
fullnameOverride: kps
namespaceOverride: kps

cleanPrometheusOperatorObjectNames: true

crds:
  enabled: false

defaultRules:
  create: false
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: true

alertmanager:
  enabled: false
  ingress:
    enabled: false
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

grafana:
  enabled: false
  namespaceOverride: kps-grafana
  defaultDashboardsEnabled: false
  forceDeployDashboards: false
  defaultDashboardsTimezone: browser
  forceDeployDatasources: false
  adminPassword: admin
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

kubeApiServer:
  enabled: false
  tlsConfig:
    serverName: kubernetes
    insecureSkipVerify: false
  serviceMonitor:
    relabelings:
    - sourceLabels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      action: keep
      regex: default;kubernetes;https
    - targetLabel: __address__
      replacement: kubernetes.default.svc:443

kubelet:
  enabled: false
  serviceMonitor:
    metricRelabelings:
    cAdvisorRelabelings:
    - action: replace
      sourceLabels: [__metrics_path__]
      targetLabel: metrics_path
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace
    probesRelabelings:
    - action: replace
      sourceLabels: [__metrics_path__]
      targetLabel: metrics_path
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace
    resourceRelabelings:
    - action: replace
      sourceLabels: [__metrics_path__]
      targetLabel: metrics_path
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace
    relabelings:
    - action: replace
      sourceLabels: [__metrics_path__]
      targetLabel: metrics_path
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

kubeControllerManager:
  enabled: false
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

coreDns:
  enabled: false
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

kubeDns:
  enabled: false

kubeEtcd:
  enabled: false
  service:
    enabled: true
    port: 2379
    targetPort: 2379
  serviceMonitor:
    scheme: https
    insecureSkipVerify: false
    serverName: localhost
    caFile: /etc/prometheus/secrets/etcd-client-cert/ca.crt
    certFile: /etc/prometheus/secrets/etcd-client-cert/healthcheck-client.crt
    keyFile: /etc/prometheus/secrets/etcd-client-cert/healthcheck-client.key
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

kubeScheduler:
  enabled: false
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

kubeProxy:
  enabled: false

kubeStateMetrics:
  enabled: false

kube-state-metrics:
  enabled: false
  namespaceOverride: kps-ksm
  fullnameOverride: kube-state-metrics
  selfMonitor:
    enabled: true
  prometheus:
    monitor:
      enabled: true
      relabelings:
      - sourceLabels: [__meta_kubernetes_pod_node_name]
        separator: ;
        regex: ^(.*)$
        targetLabel: nodename
        replacement: $1
        action: replace

nodeExporter:
  enabled: false
  forceDeployDashboards: true

prometheus-node-exporter:
  namespaceOverride: kps-node-exporter
  # fullnameOverride: node-exporter
  # podLabels:
  #   jobLabel: node-exporter
  # extraArgs:
  #   - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
  #   - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
  # service:
  #   portName: http-metrics
  prometheus:
    monitor:
      enabled: true
      relabelings:
      - sourceLabels: [__meta_kubernetes_endpoint_node_name]
        separator: ;
        regex: ^(.*)$
        targetLabel: instance
        replacement: $1
        action: replace

prometheusOperator:
  enabled: false
  fullnameOverride: prometheus-operator
  admissionWebhooks:
    enabled: true
    certManager:
      enabled: false
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

prometheus:
  enabled: false
  prometheusSpec:
    scrapeInterval: 5s
    evaluationInterval: 5s
    disableCompaction: false
    replicas: 1
    retention: 10y
    enableAdminAPI: true
    secrets: ['etcd-client-cert']
    storageSpec:
      volumeClaimTemplate:
        metadata:
          name: db # https://github.com/prometheus-community/helm-charts/issues/4523
        spec:
          storageClassName: fast
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    volumes:
    - name: tmp
      emptyDir: {}
    volumeMounts:
    - mountPath: /tmp
      name: tmp
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      separator: ;
      regex: ^(.*)$
      targetLabel: nodename
      replacement: $1
      action: replace

thanosRuler:
  enabled: false
