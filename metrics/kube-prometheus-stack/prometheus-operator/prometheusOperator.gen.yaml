---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
  namespace: kps-operator
  labels:
    release: "kps"
    app: kps-operator
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-operator
  labels:
    release: "kps"
    app: kps-operator
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
rules:
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - alertmanagers/finalizers
  - alertmanagers/status
  - alertmanagerconfigs
  - prometheuses
  - prometheuses/finalizers
  - prometheuses/status
  - prometheusagents
  - prometheusagents/finalizers
  - prometheusagents/status
  - thanosrulers
  - thanosrulers/finalizers
  - thanosrulers/status
  - scrapeconfigs
  - servicemonitors
  - podmonitors
  - probes
  - prometheusrules
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - delete
- apiGroups:
  - ""
  resources:
  - services
  - services/finalizers
  - endpoints
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - patch
  - create
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-operator
  labels:
    release: "kps"
    app: kps-operator
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: kps-operator
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-operator
  namespace: kps-operator
  labels:
    release: "kps"
    app: kps-operator
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
spec:
  ports:
  - name: https
    port: 443
    targetPort: https
  selector:
    app: kps-operator
    release: "kps"
  type: "ClusterIP"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-operator
  namespace: kps-operator
  labels:
    release: "kps"
    app: kps-operator
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kps-operator
      release: "kps"
  template:
    metadata:
      labels:
        release: "kps"
        app: kps-operator
        app.kubernetes.io/name: kps-prometheus-operator
        app.kubernetes.io/component: prometheus-operator
    spec:
      containers:
        - name: kps
          image: "quay.io/prometheus-operator/prometheus-operator:v0.73.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --kubelet-service=kube-system/kps-kubelet
            - --localhost=127.0.0.1
            - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.73.2
            - --config-reloader-cpu-request=0
            - --config-reloader-cpu-limit=0
            - --config-reloader-memory-request=0
            - --config-reloader-memory-limit=0
            - --thanos-default-base-image=quay.io/thanos/thanos:v0.35.0
            - --secret-field-selector=type!=kubernetes.io/dockercfg,type!=kubernetes.io/service-account-token,type!=helm.sh/release.v1
            - --web.enable-tls=true
            - --web.cert-file=/cert/tls.crt
            - --web.key-file=/cert/tls.key
            - --web.listen-address=:10250
            - --web.tls-min-version=VersionTLS13
          ports:
            - containerPort: 10250
              name: https
          env:
          - name: GOGC
            value: "30"
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: tls-secret
              mountPath: /cert
              readOnly: true
      volumes:
        - name: tls-secret
          secret:
            defaultMode: 420
            secretName: kps-admission
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus-operator
      automountServiceAccountToken: true
---
# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kps-root-cert
  namespace: kps-operator
spec:
  secretName: kps-root-cert
  duration: "43800h0m0s"
  issuerRef:
    name: kps-self-signed-issuer
  commonName: "ca.webhook.kube-prometheus-stack"
  isCA: true
---
# generate a server certificate for the apiservices to use
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kps-admission
  namespace: kps-operator
spec:
  secretName: kps-admission
  duration: "8760h0m0s"
  issuerRef:
    name: kps-root-issuer
  dnsNames:
    - prometheus-operator
    - prometheus-operator.kps-operator.svc
---
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: kps-self-signed-issuer
  namespace: kps-operator
spec:
  selfSigned: {}
---
# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: kps-root-issuer
  namespace: kps-operator
spec:
  ca:
    secretName: kps-root-cert
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name:  kps-admission
  annotations:
    certmanager.k8s.io/inject-ca-from: "kps-operator/kps-admission"
    cert-manager.io/inject-ca-from: "kps-operator/kps-admission"
  labels:
    app: kps-admission
    release: "kps"
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator-webhook
webhooks:
  - name: prometheusrulemutate.monitoring.coreos.com
    failurePolicy: Ignore
    rules:
      - apiGroups:
          - monitoring.coreos.com
        apiVersions:
          - "*"
        resources:
          - prometheusrules
        operations:
          - CREATE
          - UPDATE
    clientConfig:
      service:
        namespace: kps-operator
        name: prometheus-operator
        path: /admission-prometheusrules/mutate
    timeoutSeconds: 10
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: prometheus-operator
  namespace: kps-operator
  labels:
    release: "kps"
    app: kps-operator
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator
spec:
  endpoints:
  - port: https
    scheme: https
    tlsConfig:
      serverName: prometheus-operator
      ca:
        secret:
          name: kps-admission
          key: ca.crt
          optional: false
    honorLabels: true
    relabelings:
      - action: replace
        regex: ^(.*)$
        replacement: $1
        separator: ;
        sourceLabels:
        - __meta_kubernetes_pod_node_name
        targetLabel: nodename
  selector:
    matchLabels:
      app: kps-operator
      release: "kps"
  namespaceSelector:
    matchNames:
      - "kps-operator"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name:  kps-admission
  annotations:
    certmanager.k8s.io/inject-ca-from: "kps-operator/kps-admission"
    cert-manager.io/inject-ca-from: "kps-operator/kps-admission"
  labels:
    app: kps-admission
    release: "kps"
    app.kubernetes.io/name: kps-prometheus-operator
    app.kubernetes.io/component: prometheus-operator-webhook
webhooks:
  - name: prometheusrulemutate.monitoring.coreos.com
    failurePolicy: Ignore
    rules:
      - apiGroups:
          - monitoring.coreos.com
        apiVersions:
          - "*"
        resources:
          - prometheusrules
        operations:
          - CREATE
          - UPDATE
    clientConfig:
      service:
        namespace: kps-operator
        name: prometheus-operator
        path: /admission-prometheusrules/validate
    timeoutSeconds: 10
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
