---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-ksm-node-namespace
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-namespace-resources
    rules:
    - record: node_namespace:kube_pod_container_resource_requests
      expr: |-
        sum without(pod, uid) (
          sum without(container) (
            kube_pod_container_resource_requests{}
          ) * ignoring(resource, node, unit) group_left() 
          max without (phase) (
            kube_pod_status_phase{phase=~"Pending|Running"} == 1
          )
        )
    - record: node_namespace:kube_pod_container_resource_limits
      expr: |-
        sum without(pod, uid) (
          sum without(container) (
            kube_pod_container_resource_limits{}
          ) * ignoring(resource, node, unit) group_left() 
          max without (phase) (
            kube_pod_status_phase{phase=~"Pending|Running"} == 1
          )
        )
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-pod-owner-relabel
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-pod-owner-relabel
    rules:
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            label_replace(
              kube_pod_owner{owner_kind="ReplicaSet"},
              "replicaset", "$1", "owner_name", "(.*)"
            ) * on (replicaset, namespace) group_left(owner_name) topk by (replicaset, namespace) (
              1, max by (replicaset, namespace, owner_name) (
                kube_replicaset_owner
              )
            ),
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: deployment
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            kube_pod_owner{owner_kind="DaemonSet"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: daemonset
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            kube_pod_owner{owner_kind="StatefulSet"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: statefulset
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            kube_pod_owner{owner_kind="Job"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: job
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            kube_pod_owner{owner_kind="Node"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: static-pod
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            kube_pod_owner{owner_kind="Cluster"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: cnpg
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          label_replace(
            kube_pod_owner{owner_kind="BroadcastJob"},
            "workload", "$1", "owner_name", "(.*)"
          )
        )
      labels:
        workload_type: broadcast-job
    - record: namespace_workload_pod:kube_pod_owner:relabel
      expr: |-
        max without(owner_is_controller, owner_kind, owner_name) (
          kube_pod_owner{owner_kind=""}
        )
      labels:
        workload_type: free-pod
        workload: '-'
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-ksm-container-exit
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-ksm-container-exit
    rules:
    # KSM gives you 3 metrics related to container exit status: time, exit_code and reason.
    # But these metrics don't have any unique identifier.
    # If you do last_over_time() for any of them, and container has restarted more than one time,
    # you will get a mix of results from different restarts.
    # By combining them into a single metric with "timestamp" label we ensure that each restart info metric has a unique set of labels.
    - record: reason:kube_pod_container_status_last_terminated_timestamp
      expr: |-
        kube_pod_container_status_last_terminated_timestamp
        * ignoring(exit_code) group_left(exit_code)
        count_values without() ("exit_code", kube_pod_container_status_last_terminated_exitcode)
        * ignoring(exit_code, timestamp) group_left(timestamp)
        count_values without() ("timestamp", kube_pod_container_status_last_terminated_timestamp)
        * ignoring(exit_code, timestamp, reason) group_left(reason)
        kube_pod_container_status_last_terminated_reason
    # same as reason:kube_pod_container_status_last_terminated_timestamp but value is always 1, for math purposes
    - record: reason:kube_pod_container_status_last_terminated_info
      expr: |-
        reason:kube_pod_container_status_last_terminated_timestamp * 0 + 1
---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: record-ksm-node-time
  labels:
    prometheus.io/instance: main
    instance.prometheus.io/main: enable
    instance.prometheus.io/prompp: enable
spec:
  groups:
  - name: record-ksm-node-time
    rules:
    - record: kube_node_created:last_seen
      expr: |-
        kube_node_created * 0 + time()
    - record: kube_node_created:scraped
      expr: |-
        timestamp(kube_node_created)
