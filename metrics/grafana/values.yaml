rbac:
  create: true
  namespaced: true

serviceAccount:
  create: true

  automountServiceAccountToken: false

replicas: 1

automountServiceAccountToken: true

deploymentStrategy:
  type: RollingUpdate

testFramework:
  enabled: false

# grafana.ini configmap
createConfigmap: false

podPortName: grafana
gossipPortName: gossip

service:
  enabled: true
  port: 80
  portName: http-web

podLabels:
  cgroup.meoe.io/burst: enable
podAnnotations:
  cgroup.meoe.io/burst: grafana=300m,grafana-sc-dashboard=100m,grafana-sc-datasources=100m

resources:
  limits:
    cpu: 300m
    memory: 200Mi
  requests:
    cpu: 50m
    memory: 128Mi

plugins:
- ''

env:
  # https://github.com/grafana/grafana/issues/59539
  GF_RBAC_PERMISSION_CACHE: false

readinessProbe:
  periodSeconds: 1
  failureThreshold: 3

livenessProbe:
  periodSeconds: 3
  initialDelaySeconds: 60
  timeoutSeconds: 3
  failureThreshold: 20

persistence:
  type: pvc
  enabled: false
  # storageClassName: default
  accessModes:
  - ReadWriteOnce
  size: 10Gi
  existingClaim: ''
  disableWarning: false

  ## If 'lookupVolumeName' is set to true, Helm will attempt to retrieve
  ## the current value of 'spec.volumeName' and incorporate it into the template.
  lookupVolumeName: true

admin:
  existingSecret: grafana-admin
  userKey: username
  passwordKey: password

## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
sidecar:
  resources:
    limits:
      # on startup sidecar containers need several minutes to start even with 50m limit
      # are they written in Java?
      cpu: 50m
      # memory usage per sidecar is consistently high :-(
      memory: 100Mi
    requests:
      cpu: 1m
      memory: 85Mi
  enableUniqueFilenames: true
  # Log level default for all sidecars. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL. Defaults to INFO
  # logLevel: INFO
  alerts:
    enabled: false
    label: grafana.com/alert
    labelValue: main
    searchNamespace: null
    resource: both
    watchServerTimeout: 3600
    watchClientTimeout: 10
  dashboards:
    enabled: true
    SCProvider: true
    # watch resources only with following label
    label: grafana.com/dashboard
    labelValue: main
    folder: /tmp/dashboards
    # null for own namespace, ALL for all, otherwise match name
    searchNamespace: null
    # search in configmap, secret or both
    resource: configmap
    # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
    # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
    folderAnnotation: null
    # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
    # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
    watchServerTimeout: 3600
    # watchClientTimeout: is a client-side timeout, configuring your local socket.
    # If you have a network outage dropping all packets with no RST/FIN,
    # this is how long your client waits before realizing & dropping the connection.
    # defaults to 66sec (sic!)
    watchClientTimeout: 10
    provider:
      name: sidecarProvider
      # orgid as configured in grafana
      orgid: 1
      # folder in which the dashboards should be imported in grafana
      folder: ''
      # <string> folder UID. will be automatically generated if not specified
      folderUid: ''
      disableDelete: false
      # allow updating provisioned dashboards from the UI
      allowUiUpdates: false
      foldersFromFilesStructure: false
  datasources:
    enabled: true
    label: grafana.com/datasource
    labelValue: main
    searchNamespace: null
    resource: configmap
    watchServerTimeout: 3600
    watchClientTimeout: 10
  plugins:
    enabled: true
    label: plugin.grafana.com/instance
    labelValue: main
    searchNamespace: null
    resource: both
    watchServerTimeout: 3600
    watchClientTimeout: 10
  notifiers:
    enabled: false
    label: notifier.grafana.com/instance
    labelValue: main
    searchNamespace: null
    resource: both
    watchServerTimeout: 3600
    watchClientTimeout: 10

useStatefulSet: false
