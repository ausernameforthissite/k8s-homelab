---
# Not created if istiod is running remotely
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: istiod
  namespace: istio
  labels:
    app: istiod
    istio.io/rev: "default"
    install.operator.istio.io/owning-resource: unknown
    operator.istio.io/component: "Pilot"
    release: istio-istiod
    istio: pilot
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: istiod
      istio: pilot
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istiod
  namespace: istio
  labels:
    app: istiod
    release: istio-istiod
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio
  namespace: istio
  labels:
    istio.io/rev: "default"
    install.operator.istio.io/owning-resource: unknown
    operator.istio.io/component: "Pilot"
    release: istio-istiod
data:
  # Configuration file for the mesh networks to be used by the Split Horizon EDS.
  meshNetworks: |-
    networks: {}
  mesh: |-
    defaultConfig:
      discoveryAddress: istiod.istio.svc:15012
    defaultProviders:
      metrics:
      - prometheus
    enablePrometheusMerge: true
    rootNamespace: istio
    trustDomain: cluster.local
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istiod-clusterrole-istio
  labels:
    app: istiod
    release: istio-istiod
rules:
  # sidecar injection controller
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "update", "patch"]
  # configuration validation webhook controller
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "update"]
  # istio configuration
  # removing CRD permissions can break older versions of Istio running alongside this control plane (https://github.com/istio/istio/issues/29382)
  # please proceed with caution
  - apiGroups: ["config.istio.io", "security.istio.io", "networking.istio.io", "authentication.istio.io", "rbac.istio.io", "telemetry.istio.io", "extensions.istio.io"]
    verbs: ["get", "watch", "list"]
    resources: ["*"]
  - apiGroups: ["networking.istio.io"]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["workloadentries"]
  - apiGroups: ["networking.istio.io"]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["workloadentries/status", "serviceentries/status"]
  - apiGroups: ["security.istio.io"]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["authorizationpolicies/status"]
  - apiGroups: [""]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["services/status"]
  # auto-detect installed CRD definitions
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch"]
  # discovery and routing
  - apiGroups: [""]
    resources: ["pods", "nodes", "services", "namespaces", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get", "list", "watch"]
  # ingress controller
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "ingressclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses/status"]
    verbs: ["*"]
  # required for CA's namespace controller
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "list", "watch", "update"]
  # Istiod and bootstrap.

  # Used by Istiod to verify the JWT tokens
  - apiGroups: ["authentication.k8s.io"]
    resources: ["tokenreviews"]
    verbs: ["create"]
  # Used by Istiod to verify gateway SDS
  - apiGroups: ["authorization.k8s.io"]
    resources: ["subjectaccessreviews"]
    verbs: ["create"]
  # Use for Kubernetes Service APIs
  - apiGroups: ["gateway.networking.k8s.io", "gateway.networking.x-k8s.io"]
    resources: ["*"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["gateway.networking.x-k8s.io"]
    resources:
      - xbackendtrafficpolicies/status
      - xlistenersets/status
    verbs: ["update", "patch"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources:
      - backendtlspolicies/status
      - gatewayclasses/status
      - gateways/status
      - grpcroutes/status
      - httproutes/status
      - referencegrants/status
      - tcproutes/status
      - tlsroutes/status
      - udproutes/status
    verbs: ["update", "patch"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["gatewayclasses"]
    verbs: ["create", "update", "patch", "delete"]
  - apiGroups: ["inference.networking.x-k8s.io"]
    resources: ["inferencepools"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["inference.networking.x-k8s.io"]
    resources: ["inferencepools/status"]
    verbs: ["update", "patch"]
  # Needed for multicluster secret reading, possibly ingress certs in the future
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list"]
  # Used for MCS serviceexport management
  - apiGroups: ["multicluster.x-k8s.io"]
    resources: ["serviceexports"]
    verbs: ["get", "watch", "list", "create", "delete"]
  # Used for MCS serviceimport management
  - apiGroups: ["multicluster.x-k8s.io"]
    resources: ["serviceimports"]
    verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istiod-gateway-controller-istio
  labels:
    app: istiod
    release: istio-istiod
rules:
  - apiGroups: ["apps"]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["deployments"]
  - apiGroups: ["autoscaling"]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["horizontalpodautoscalers"]
  - apiGroups: ["policy"]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["poddisruptionbudgets"]
  - apiGroups: [""]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["services"]
  - apiGroups: [""]
    verbs: ["get", "watch", "list", "update", "patch", "create", "delete"]
    resources: ["serviceaccounts"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-reader-clusterrole-istio
  labels:
    app: istio-reader
    release: istio-istiod
rules:
  - apiGroups:
      - "config.istio.io"
      - "security.istio.io"
      - "networking.istio.io"
      - "authentication.istio.io"
      - "rbac.istio.io"
      - "telemetry.istio.io"
      - "extensions.istio.io"
    resources: ["*"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["endpoints", "pods", "services", "nodes", "replicationcontrollers", "namespaces", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.istio.io"]
    verbs: ["get", "watch", "list"]
    resources: ["workloadentries"]
  - apiGroups: ["networking.x-k8s.io", "gateway.networking.k8s.io"]
    resources: ["gateways"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["multicluster.x-k8s.io"]
    resources: ["serviceexports"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["multicluster.x-k8s.io"]
    resources: ["serviceimports"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["authentication.k8s.io"]
    resources: ["tokenreviews"]
    verbs: ["create"]
  - apiGroups: ["authorization.k8s.io"]
    resources: ["subjectaccessreviews"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istiod-clusterrole-istio
  labels:
    app: istiod
    release: istio-istiod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istiod-clusterrole-istio
subjects:
  - kind: ServiceAccount
    name: istiod
    namespace: istio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istiod-gateway-controller-istio
  labels:
    app: istiod
    release: istio-istiod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istiod-gateway-controller-istio
subjects:
  - kind: ServiceAccount
    name: istiod
    namespace: istio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-reader-clusterrole-istio
  labels:
    app: istio-reader
    release: istio-istiod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-reader-clusterrole-istio
subjects:
  - kind: ServiceAccount
    name: istio-reader-service-account
    namespace: istio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istiod
  namespace: istio
  labels:
    app: istiod
    release: istio-istiod
rules:
  # permissions to verify the webhook is ready and rejecting
  # invalid config. We use --server-dry-run so no config is persisted.
  - apiGroups: ["networking.istio.io"]
    verbs: ["create"]
    resources: ["gateways"]
  # For storing CA secret
  - apiGroups: [""]
    resources: ["secrets"]
    # TODO lock this down to istio-ca-cert if not using the DNS cert mesh config
    verbs: ["create", "get", "watch", "list", "update", "delete"]
  # For status controller, so it can delete the distribution report configmap
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["delete"]
  # For gateway deployment controller
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "update", "patch", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istiod
  namespace: istio
  labels:
    app: istiod
    release: istio-istiod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istiod
subjects:
  - kind: ServiceAccount
    name: istiod
    namespace: istio
---
# Not created if istiod is running remotely
apiVersion: v1
kind: Service
metadata:
  name: istiod
  namespace: istio
  labels:
    istio.io/rev: "default"
    install.operator.istio.io/owning-resource: unknown
    operator.istio.io/component: "Pilot"
    app: istiod
    istio: pilot
    release: istio-istiod
spec:
  ports:
    - port: 15010
      name: grpc-xds # plaintext
      protocol: TCP
    - port: 15012
      name: https-dns # mTLS with k8s-signed cert
      protocol: TCP
    - port: 443
      name: https-webhook # validation and injection
      targetPort: 15017
      protocol: TCP
    - port: 15014
      name: http-monitoring # prometheus stats
      protocol: TCP
  selector:
    app: istiod
    # Label used by the 'default' service. For versioned deployments we match with app and version.
    # This avoids default deployment picking the canary
    istio: pilot
---
# Not created if istiod is running remotely
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istiod
  namespace: istio
  labels:
    app: istiod
    istio.io/rev: "default"
    install.operator.istio.io/owning-resource: unknown
    operator.istio.io/component: "Pilot"
    istio: pilot
    release: istio-istiod
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  selector:
    matchLabels:
      istio: pilot
  template:
    metadata:
      labels:
        app: istiod
        istio.io/rev: "default"
        install.operator.istio.io/owning-resource: unknown
        sidecar.istio.io/inject: "false"
        operator.istio.io/component: "Pilot"
        istio: pilot
        istio.io/dataplane-mode: none
      annotations:
        prometheus.io/port: "15014"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      tolerations:
        - key: cni.istio.io/not-ready
          operator: "Exists"
      serviceAccountName: istiod
      containers:
        - name: discovery
          image: "docker.io/istio/pilot:1.27.1"
          args:
            - "discovery"
            - --monitoringAddr=:15014
            - --log_output_level=default:info
            - --domain
            - cluster.local
            - --keepaliveMaxServerConnectionAge
            - "30m"
          ports:
            - containerPort: 8080
              protocol: TCP
              name: http-debug
            - containerPort: 15010
              protocol: TCP
              name: grpc-xds
            - containerPort: 15012
              protocol: TCP
              name: tls-xds
            - containerPort: 15017
              protocol: TCP
              name: https-webhooks
            - containerPort: 15014
              protocol: TCP
              name: http-monitoring
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 3
            timeoutSeconds: 5
          env:
            - name: REVISION
              value: "default"
            - name: PILOT_CERT_PROVIDER
              value: istiod
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.serviceAccountName
            - name: KUBECONFIG
              value: /var/run/secrets/remote/config
            - name: CA_TRUSTED_NODE_ACCOUNTS
              # If you explicitly told us where ztunnel lives, use that.
              # Otherwise, assume it lives in our namespace
              # Also, check for an explicit ENV override (legacy approach) and prefer that
              # if present

              value: "istio/ztunnel"
            - name: PILOT_ENABLE_ALPHA_GATEWAY_API
              value: "true"
            - name: PILOT_TRACE_SAMPLING
              value: "1"
              # If externalIstiod is set via Values.Global, then enable the pilot env variable. However, if it's set via Values.pilot.env, then
              # don't set it here to avoid duplication.
              # TODO (nshankar13): Move from Helm chart to code: https://github.com/istio/istio/issues/52449
            - name: PILOT_ENABLE_ANALYSIS
              value: "false"
            - name: CLUSTER_ID
              value: "Kubernetes"
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
                  divisor: "1"
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
                  divisor: "1"
            - name: PLATFORM
              value: ""
          resources:
            requests:
              cpu: 5m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: istio-token
              mountPath: /var/run/secrets/tokens
              readOnly: true
            - name: local-certs
              mountPath: /var/run/secrets/istio-dns
            - name: cacerts
              mountPath: /etc/cacerts
              readOnly: true
            - name: istio-kubeconfig
              mountPath: /var/run/secrets/remote
              readOnly: true
            - name: istio-csr-dns-cert
              mountPath: /var/run/secrets/istiod/tls
              readOnly: true
            - name: istio-csr-ca-configmap
              mountPath: /var/run/secrets/istiod/ca
              readOnly: true
      volumes:
        # Technically not needed on this pod - but it helps debugging/testing SDS
        # Should be removed after everything works.
        - emptyDir:
            medium: Memory
          name: local-certs
        - name: istio-token
          projected:
            sources:
              - serviceAccountToken:
                  audience: istio-ca
                  expirationSeconds: 43200
                  path: istio-token
        # Optional: user-generated root
        - name: cacerts
          secret:
            secretName: cacerts
            optional: true
        - name: istio-kubeconfig
          secret:
            secretName: istio-kubeconfig
            optional: true
        # Optional: istio-csr dns pilot certs
        - name: istio-csr-dns-cert
          secret:
            secretName: istiod-tls
            optional: true
        - name: istio-csr-ca-configmap
          configMap:
            name: istio-ca-root-cert
            defaultMode: 420
            optional: true
---

---

---

---

---

---

---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: istio-sidecar-injector-istio
  labels:
    istio.io/rev: "default"
    install.operator.istio.io/owning-resource: unknown
    operator.istio.io/component: "Pilot"
    app: sidecar-injector
    release: istio-istiod
webhooks:
  - name: rev.namespace.sidecar-injector.istio.io
    clientConfig:
      service:
        name: istiod
        namespace: istio
        path: "/inject"
        port: 443
    sideEffects: None
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    reinvocationPolicy: "Never"
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchExpressions:
        - key: istio.io/rev
          operator: In
          values:
            - "default"
        - key: istio-injection
          operator: DoesNotExist
    objectSelector:
      matchExpressions:
        - key: sidecar.istio.io/inject
          operator: NotIn
          values:
            - "false"
  - name: rev.object.sidecar-injector.istio.io
    clientConfig:
      service:
        name: istiod
        namespace: istio
        path: "/inject"
        port: 443
    sideEffects: None
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    reinvocationPolicy: "Never"
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchExpressions:
        - key: istio.io/rev
          operator: DoesNotExist
        - key: istio-injection
          operator: DoesNotExist
    objectSelector:
      matchExpressions:
        - key: sidecar.istio.io/inject
          operator: NotIn
          values:
            - "false"
        - key: istio.io/rev
          operator: In
          values:
            - "default"
  - name: namespace.sidecar-injector.istio.io
    clientConfig:
      service:
        name: istiod
        namespace: istio
        path: "/inject"
        port: 443
    sideEffects: None
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    reinvocationPolicy: "Never"
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchExpressions:
        - key: istio-injection
          operator: In
          values:
            - enabled
    objectSelector:
      matchExpressions:
        - key: sidecar.istio.io/inject
          operator: NotIn
          values:
            - "false"
  - name: object.sidecar-injector.istio.io
    clientConfig:
      service:
        name: istiod
        namespace: istio
        path: "/inject"
        port: 443
    sideEffects: None
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    reinvocationPolicy: "Never"
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchExpressions:
        - key: istio-injection
          operator: DoesNotExist
        - key: istio.io/rev
          operator: DoesNotExist
    objectSelector:
      matchExpressions:
        - key: sidecar.istio.io/inject
          operator: In
          values:
            - "true"
        - key: istio.io/rev
          operator: DoesNotExist
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: istio-validator-istio
  labels:
    app: istiod
    release: istio-istiod
    istio: istiod
    istio.io/rev: "default"
webhooks:
  # Webhook handling per-revision validation. Mostly here so we can determine whether webhooks
  # are rejecting invalid configs on a per-revision basis.
  - name: rev.validation.istio.io
    clientConfig:
      # Should change from base but cannot for API compat
      service:
        name: istiod
        namespace: istio
        path: "/validate"
    rules:
      - operations:
          - CREATE
          - UPDATE
        apiGroups:
          - security.istio.io
          - networking.istio.io
          - telemetry.istio.io
          - extensions.istio.io
        apiVersions:
          - "*"
        resources:
          - "*"
    # Fail open until the validation webhook is ready. The webhook controller
    # will update this to `Fail` and patch in the `caBundle` when the webhook
    # endpoint is ready.
    failurePolicy: Ignore
    sideEffects: None
    admissionReviewVersions: ["v1"]
    objectSelector:
      matchExpressions:
        - key: istio.io/rev
          operator: In
          values:
            - "default"
