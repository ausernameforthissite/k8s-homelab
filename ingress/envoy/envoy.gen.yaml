---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-gateway
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-gateway-config
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
data:
  envoy-gateway.yaml: |
    apiVersion: gateway.envoyproxy.io/v1alpha1
    kind: EnvoyGateway
    gateway:
      controllerName: gateway.envoyproxy.io/gatewayclass-controller
    logging:
      level:
        default: info
    provider:
      type: Kubernetes
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: envoy-gateway-gateway-helm-envoy-gateway-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  verbs:
  - update
- apiGroups:
  - multicluster.x-k8s.io
  resources:
  - serviceimports
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - envoyproxies
  - envoypatchpolicies
  - clienttrafficpolicies
  - backendtrafficpolicies
  - securitypolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - envoypatchpolicies/status
  - clienttrafficpolicies/status
  - backendtrafficpolicies/status
  - securitypolicies/status
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  - grpcroutes
  - httproutes
  - referencegrants
  - tcproutes
  - tlsroutes
  - udproutes
  - backendtlspolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/status
  - grpcroutes/status
  - httproutes/status
  - tcproutes/status
  - tlsroutes/status
  - udproutes/status
  - backendtlspolicies/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: envoy-gateway-gateway-helm-envoy-gateway-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: envoy-gateway-gateway-helm-envoy-gateway-role
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: 'envoy-gateway'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: envoy-gateway-gateway-helm-infra-manager
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - services
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - get
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: envoy-gateway-gateway-helm-leader-election-role
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: envoy-gateway-gateway-helm-infra-manager
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'envoy-gateway-gateway-helm-infra-manager'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: 'envoy-gateway'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: envoy-gateway-gateway-helm-leader-election-rolebinding
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'envoy-gateway-gateway-helm-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway'
  namespace: 'envoy-gateway'
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '19001'
  name: envoy-gateway-metrics-service
  namespace: 'envoy-gateway'
  labels:
    control-plane: envoy-gateway
    app.kubernetes.io/name: gateway-helm
spec:
  selector:
    control-plane: envoy-gateway
    app.kubernetes.io/name: gateway-helm
  ports:
  - name: http
    port: 19001
    protocol: TCP
    targetPort: http-metrics
---
apiVersion: v1
kind: Service
metadata:
  name: envoy-gateway
  namespace: 'envoy-gateway'
  labels:
    control-plane: envoy-gateway
    app.kubernetes.io/name: gateway-helm
spec:
  selector:
    control-plane: envoy-gateway
    app.kubernetes.io/name: gateway-helm
  ports:
  - name: grpc
    port: 18000
    targetPort: 18000
  - name: ratelimit
    port: 18001
    targetPort: 18001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-gateway
  namespace: 'envoy-gateway'
  labels:
    control-plane: envoy-gateway
    app.kubernetes.io/name: gateway-helm
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: envoy-gateway
      app.kubernetes.io/name: gateway-helm
  template:
    metadata:
      labels:
        control-plane: envoy-gateway
        app.kubernetes.io/name: gateway-helm
    spec:
      containers:
      - args:
        - server
        - --config-path=/config/envoy-gateway.yaml
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: docker.io/envoyproxy/gateway:v1.0.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: envoy-gateway
        ports:
        - containerPort: 18000
          name: grpc
        - containerPort: 18001
          name: ratelimit
        - containerPort: 19001
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /config
          name: envoy-gateway-config
          readOnly: true
        - mountPath: /certs
          name: certs
          readOnly: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: envoy-gateway
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          defaultMode: 420
          name: envoy-gateway-config
        name: envoy-gateway-config
      - name: certs
        secret:
          secretName: envoy-gateway
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-gateway-gateway-helm-certgen
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
  annotations:
    "helm.sh/hook": pre-install
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: envoy-gateway-gateway-helm-certgen
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
  annotations:
    "helm.sh/hook": pre-install
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: envoy-gateway-gateway-helm-certgen
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
  annotations:
    "helm.sh/hook": pre-install
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'envoy-gateway-gateway-helm-certgen'
subjects:
- kind: ServiceAccount
  name: 'envoy-gateway-gateway-helm-certgen'
  namespace: 'envoy-gateway'
---
apiVersion: batch/v1
kind: Job
metadata:
  name: envoy-gateway-gateway-helm-certgen
  namespace: 'envoy-gateway'
  labels:
    app.kubernetes.io/name: gateway-helm
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
spec:
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: certgen
    spec:
      containers:
      - command:
        - envoy-gateway
        - certgen
        env:
        - name: ENVOY_GATEWAY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: cluster.local
        image: docker.io/envoyproxy/gateway:v1.0.1
        imagePullPolicy: IfNotPresent
        name: envoy-gateway-certgen
      restartPolicy: Never
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: envoy-gateway-gateway-helm-certgen
  ttlSecondsAfterFinished: 0
