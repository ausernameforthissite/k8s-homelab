---
apiVersion: acid.zalan.do/v1
kind: OperatorConfiguration
metadata:
  name: postgres-operator
  namespace: postgres-operator
  labels:
    app.kubernetes.io/name: postgres-operator
configuration:
  connection_pooler:
    connection_pooler_default_cpu_limit: "0"
    connection_pooler_default_cpu_request: "0"
    connection_pooler_default_memory_limit: 100Mi
    connection_pooler_default_memory_request: 100Mi
  enable_crd_registration: false
  kubernetes:
    cluster_domain: cluster.local
    enable_pod_antiaffinity: true
    # don't forget to set pod_management_policy=parallel when enable_readiness_probe=true
    #   https://github.com/zalando/postgres-operator/issues/1978
    #   https://github.com/zalando/postgres-operator/issues/2003
    enable_readiness_probe: true
    # required when using enable_readiness_probe
    pod_management_policy: parallel
    pod_terminate_grace_period: 30s
    secret_name_template: '{username}.{cluster}.credentials.{tprkind}.{tprgroup}'
    watched_namespace: '*'
  postgres_pod_resources:
    default_cpu_limit: "0"
    default_cpu_request: "0"
    default_memory_limit: 500Mi
    default_memory_request: 100Mi
    min_cpu_limit: "0"
    min_memory_limit: 250Mi
  set_memory_request_to_limit: false
  timeouts:
    pod_deletion_wait_timeout: 2m
    pod_label_wait_timeout: 3m
---
# https://github.com/zalando/postgres-operator/pull/2900
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: postgres-operator
rules:
# all verbs allowed for custom operator resources
- apiGroups:
  - acid.zalan.do
  resources:
  - postgresqls
  - postgresqls/status
  - operatorconfigurations
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# operator only reads PostgresTeams
- apiGroups:
  - acid.zalan.do
  resources:
  - postgresteams
  verbs:
  - get
  - list
  - watch
# all verbs allowed for event streams (Zalando-internal feature)
# - apiGroups:
#   - zalando.org
#   resources:
#   - fabriceventstreams
#   verbs:
#   - create
#   - delete
#   - deletecollection
#   - get
#   - list
#   - patch
#   - update
#   - watch
# to create or get/update CRDs when starting up
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - patch
  - update
# to create endpoints to services
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# to read configuration and manage ConfigMaps used by Patroni
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# to send events to the CRs
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
# to CRUD secrets for database access
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - patch
  - update
# to check nodes for node readiness label
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
# to read or delete existing PVCs. Creation via StatefulSet
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - delete
  - get
  - list
  - patch
  - update
 # to read existing PVs. Creation should be done via dynamic provisioning
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - update  # only for resizing AWS volumes
# to watch Spilo pods and do rolling updates. Creation via StatefulSet
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - patch
  - update
  - watch
# to resize the filesystem in Spilo pods when increasing volume size
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
# to CRUD services to point to Postgres cluster instances
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - patch
  - update
# to CRUD the StatefulSet which controls the Postgres cluster instances
- apiGroups:
  - apps
  resources:
  - statefulsets
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
# to CRUD cron jobs for logical backups
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
# to get namespaces operator resources can run in
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
# to define PDBs. Update happens via delete/create
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - get
# to create ServiceAccounts in each namespace the operator watches
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - create
# to create role bindings to the postgres-pod service account
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - get
  - create
- apiGroups: ["coordination.k8s.io"]
  resources:
    - leases  # Only if Patroni tries to use K8s Leases
  verbs:
    - create
    - get
    - list
    - update
    - delete
    - watch
    - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: postgres-pod
rules:
# to create endpoints to services
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
- apiGroups: [""]
  resources:
    - events  # Patroni may log to events
  verbs:
    - create
    - get
    - list
    - patch
    - update
    - watch
- apiGroups: ["coordination.k8s.io"]
  resources:
    - leases  # Only if Patroni tries to use K8s Leases
  verbs:
    - create
    - get
    - list
    - update
    - delete
    - watch
    - patch
# Patroni needs to watch and manage config maps
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# Patroni needs to watch pods
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
# to let Patroni create a headless service
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  # to check nodes for node readiness label
- apiGroups:
    - ""
  resources:
    - nodes
  verbs:
    - get
    - list
    - watch
