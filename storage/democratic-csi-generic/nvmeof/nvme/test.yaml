---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-nvmeof
spec:
  selector:
    matchLabels:
      app: test-nvmeof
  template:
    metadata:
      labels:
        app: test-nvmeof
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 2000
        fsGroup: 3000
        fsGroupChangePolicy: OnRootMismatch
      containers:
      - name: alpine
        image: docker.io/alpine:3.17.3
        command: ["/bin/sh", "-c", "trap : TERM INT; sleep infinity & wait"]
        resources:
          limits:
            memory: 128Mi
        volumeMounts:
        - mountPath: /mnt/data
          name: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: test-nvmeof
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-nvmeof-root
spec:
  selector:
    matchLabels:
      app: test-nvmeof-root
  template:
    metadata:
      labels:
        app: test-nvmeof-root
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - test-nvmeof
      securityContext:
        runAsUser: 0
        runAsGroup: 2000
        fsGroup: 3000
        fsGroupChangePolicy: OnRootMismatch
      containers:
      - name: alpine
        image: docker.io/alpine:3.17.3
        command: ["/bin/sh", "-c", "trap : TERM INT; sleep infinity & wait"]
        resources:
          limits:
            memory: 128Mi
        volumeMounts:
        - mountPath: /mnt/data
          name: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: test-nvmeof
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-nvmeof
spec:
  storageClassName: nvme
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
