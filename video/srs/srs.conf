
ff_log_dir /dev/null;
# in_docker on;

# For gracefully quit, wait for a while then close listeners,
# because K8S notify SRS with SIGQUIT and update Service simultaneously,
# maybe there is some new connections incoming before Service updated.
# @see https://github.com/ossrs/srs/issues/1595#issuecomment-587516567
# Overwrite by env SRS_GRACE_START_WAIT
# default: 2300
grace_start_wait 2300;
# For gracefully quit, final wait for cleanup in milliseconds.
# @see https://github.com/ossrs/srs/issues/1579#issuecomment-587414898
# Overwrite by env SRS_GRACE_FINAL_WAIT
# default: 3200
grace_final_wait 3200;
inotify_auto_reload on;

#############################################################################################
# RTMP sections
#############################################################################################
# the rtmp listen ports, split by space, each listen entry is <[ip:]port>
listen 1935;

#############################################################################################
# HTTP sections
#############################################################################################
# api of srs.
# the http api config, export for external program to manage srs.
# user can access http api of srs in browser directly, for instance, to access by:
#       curl http://192.168.1.170:1985/api/v1/reload
http_api {
  enabled on;
  # The http api listen entry is <[ip:]port>
  # Note that you're able to use a dedicated port for HTTP API, such as 1985, to be different with HTTP server. In
  # this situation, you you must also set another HTTPS API port.
  # Default: 1985
  listen 1985;
  crossdomain on;
  # http Basic auth for api endpoint
  auth {
    enabled on;
    username admin;
    password admin;
  }
  https {
    enabled off;
  }
}

http_server {
  enabled on;
  # the http streaming listen entry is <[ip:]port>
  listen 8080;
  dir ./objs/nginx/html;
  crossdomain on;
  https {
    enabled off;
  }
}

#############################################################################################
# SRT server section
#############################################################################################
# @doc https://github.com/ossrs/srs/issues/1147#usage
srt_server {
  enabled on;
  # The UDP listen port for SRT.
  listen 10080;
  # Default app for vmix
  default_app live;
  # The passphrase of SRT.
  # If passphrase is no empty, all the srt client must be using the correct passphrase to publish or play,
  # or the srt connection will reject. The length of passphrase must be in range 10~79.
  # @see https://github.com/Haivision/srt/blob/master/docs/API/API-socket-options.md#srto_passphrase.
  # Overwrite by env SRS_SRT_SERVER_PASSPHRASE
  # default: ""
  # passphrase xxxxxxxxxxxx;
}

vhost srt.vhost.srs.com {
  srt {
    # Whether enable SRT on this vhost.
    # Overwrite by env SRS_VHOST_SRT_ENABLED for all vhosts.
    # Default: off
    enabled on;
    # Whether covert SRT to RTMP stream.
    # Overwrite by env SRS_VHOST_SRT_TO_RTMP for all vhosts.
    # Default: on
    srt_to_rtmp on;
  }
}

#############################################################################################
# WebRTC server section
#############################################################################################
rtc_server {
  enabled on;
  # udp listen port
  listen 8000;
  # For WebRTC over TCP directly, not TURN, see https://github.com/ossrs/srs/issues/2852
  # Some network does not support UDP, or not very well, so we use TCP like HTTP/80 port for firewall traversing.
  tcp {
    enabled on;
    listen 8000;
  }
  # The protocol for candidate to use, it can be:
  #       udp         Generate UDP candidates. Note that UDP server is always enabled for WebRTC.
  #       tcp         Generate TCP candidates. Fail if rtc_server.tcp(WebRTC over TCP) is disabled.
  #       all         Generate UDP+TCP candidates. Ignore if rtc_server.tcp(WebRTC over TCP) is disabled.
  # Note that if both are connected, we will use the first connected(DTLS done) one.
  protocol all;
  # The exposed candidate IPs, response in SDP candidate line. It can be:
  #       *           Retrieve server IP automatically, from all network interfaces.
  #       $CANDIDATE  Read the IP from ENV variable, use * if not set.
  #       x.x.x.x     A specified IP address or DNS name, use * if 0.0.0.0.
  # You can also set the candidate by the query string eip, note that you can also set the UDP port,
  # for example:
  #       http://locahost:1985/rtc/v1/whip/?app=live&stream=livestream&eip=192.168.3.11
  #       http://locahost:1985/rtc/v1/whip/?app=live&stream=livestream&eip=192.168.3.11:18000
  # @remark For Firefox, the candidate MUST be IP, MUST NOT be DNS name, see https://bugzilla.mozilla.org/show_bug.cgi?id=1239006
  # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#config-candidate
  # Overwrite by env SRS_RTC_SERVER_CANDIDATE
  # default: *
  candidate *;
  use_auto_detect_network_ip off;
  # If api_as_candidates is on, SRS would try to use the IP of api server, specified by srs.sdk.js request:
  #       api:string "http://r.ossrs.net:1985/rtc/v1/play/"
  # in this case, the r.ossrs.net and 39.107.238.185 will be added as candidates.
  # Overwrite by env SRS_RTC_SERVER_API_AS_CANDIDATES
  # Default: on
  api_as_candidates on;
  resolve_api_domain on;
  # If use api as CANDIDATE, whether keep original api domain name as CANDIDATE.
  # Note that use original domain name as CANDIDATE, which might make Firefox failed, see https://bugzilla.mozilla.org/show_bug.cgi?id=1239006
  # Overwrite by env SRS_RTC_SERVER_KEEP_API_DOMAIN
  # Default: off
  keep_api_domain off;
  ecdsa on;
  encrypt on;
  # Whether merge multiple NALUs into one.
  # @see https://github.com/ossrs/srs/issues/307#issuecomment-612806318
  # Overwrite by env SRS_RTC_SERVER_MERGE_NALUS
  # default: off
  merge_nalus off;
}

vhost rtc.vhost.srs.com {
  rtc {
    enabled on;
    # Whether support NACK.
    # Overwrite by env SRS_VHOST_RTC_NACK for all vhosts.
    # default: on
    nack on;
    # Whether directly use the packet, avoid copy.
    # Overwrite by env SRS_VHOST_RTC_NACK_NO_COPY for all vhosts.
    # default: on
    nack_no_copy on;
    # Whether support TWCC.
    # Overwrite by env SRS_VHOST_RTC_TWCC for all vhosts.
    # default: on
    twcc on;
    # The timeout in seconds for session timeout.
    # Client will send ping(STUN binding request) to server, we use it as heartbeat.
    # Overwrite by env SRS_VHOST_RTC_STUN_TIMEOUT for all vhosts.
    # default: 30
    stun_timeout 30;
    # The strict check when process stun.
    # Overwrite by env SRS_VHOST_RTC_STUN_STRICT_CHECK for all vhosts.
    # default: off
    stun_strict_check on;
    # The role of dtls when peer is actpass: passive or active
    # Overwrite by env SRS_VHOST_RTC_DTLS_ROLE for all vhosts.
    # default: passive
    dtls_role passive;
    # The version of dtls, support dtls1.0, dtls1.2, and auto
    # Overwrite by env SRS_VHOST_RTC_DTLS_VERSION for all vhosts.
    # default: auto
    dtls_version auto;
    # Drop the packet with the pt(payload type), 0 never drop.
    # Overwrite by env SRS_VHOST_RTC_DROP_FOR_PT for all vhosts.
    # default: 0
    drop_for_pt 0;
    ###############################################################
    # Whether enable transmuxing RTMP to RTC.
    # If enabled, transcode aac to opus.
    # Overwrite by env SRS_VHOST_RTC_RTMP_TO_RTC for all vhosts.
    # default: off
    rtmp_to_rtc off;
    # Whether keep B-frame, which is normal feature in live streaming,
    # but usually disabled in RTC.
    # Overwrite by env SRS_VHOST_RTC_KEEP_BFRAME for all vhosts.
    # default: off
    keep_bframe off;
    # Whether to keep the h.264 SEI type NALU packet.
    # DJI drone M30T will send many SEI type NALU packet, while iOS hardware decoder (Video Toolbox)
    # dislike to feed it so many SEI NALU between NonIDR and IDR NALU packets.
    # @see https://github.com/ossrs/srs/issues/4052
    # Overwrite by env SRS_VHOST_RTC_KEEP_AVC_NALU_SEI for all vhosts.
    # Default: on
    keep_avc_nalu_sei on;
    # The transcode audio bitrate, for RTMP to RTC.
    # Overwrite by env SRS_VHOST_RTC_OPUS_BITRATE for all vhosts.
    # [8000, 320000]
    # default: 48000
    opus_bitrate 48000;
    ###############################################################
    # Whether enable transmuxing RTC to RTMP.
    # Overwrite by env SRS_VHOST_RTC_RTC_TO_RTMP for all vhosts.
    # Default: off
    rtc_to_rtmp off;
    # The PLI interval in seconds, for RTC to RTMP.
    # Note the available range is [0.5, 30]
    # Overwrite by env SRS_VHOST_RTC_PLI_FOR_RTMP for all vhosts.
    # Default: 6.0
    pli_for_rtmp 6.0;
    # The transcode audio bitrate, for RTC to RTMP.
    # Overwrite by env SRS_VHOST_RTC_AAC_BITRATE for all vhosts.
    # [8000, 320000]
    # default: 48000
    aac_bitrate 48000;
  }
  ###############################################################
  # For transmuxing RTMP to RTC, it will impact the default values if RTC is on.
  # Whether enable min delay mode for vhost.
  # Overwrite by env SRS_VHOST_MIN_LATENCY for all vhosts.
  # default: on, for RTC.
  min_latency on;
  play {
    # set the MW(merged-write) latency in ms.
    # @remark For WebRTC, we enable pass-by-timestamp mode, so we ignore this config.
    # Overwrite by env SRS_VHOST_PLAY_MW_LATENCY for all vhosts.
    # default: 0 (For WebRTC)
    mw_latency 0;
    # Set the MW(merged-write) min messages.
    # default: 0 (For Real-Time, that is min_latency on)
    # default: 1 (For WebRTC, that is min_latency off)
    # Overwrite by env SRS_VHOST_PLAY_MW_MSGS for all vhosts.
    mw_msgs 0;
  }
}

#############################################################################################
# other global sections
#############################################################################################

query_latest_version off;

# Prometheus exporter config.
# See https://prometheus.io/docs/instrumenting/exporters
exporter {
  # Whether exporter is enabled.
  # Overwrite by env SRS_EXPORTER_ENABLED
  # Default: off
  enabled off;
  # The http api listen port for exporter metrics.
  # Overwrite by env SRS_EXPORTER_LISTEN
  # Default: 9972
  # See https://github.com/prometheus/prometheus/wiki/Default-port-allocations
  listen 9972;
  # The logging label to category the cluster servers.
  # Overwrite by env SRS_EXPORTER_LABEL
  label cn-beijing;
  # The logging tag to category the cluster servers.
  # Overwrite by env SRS_EXPORTER_TAG
  tag cn-edge;
}

#############################################################################################
# heartbeat/stats sections
#############################################################################################
# heartbeat to api server
# @remark, the ip report to server, is retrieve from system stat,
#       which need the config item stats.network.
heartbeat {
  enabled off;
  # the interval seconds for heartbeat
  interval 9.3;
  # when startup, srs will heartbeat to this api.
  # @remark: must be a restful http api url, where SRS will POST with following data:
  #   {
  #       "device_id": "my-srs-device",
  #       "ip": "192.168.1.100"
  #   }
  # Overwrite by env SRS_HEARTBEAT_URL
  # default: http://127.0.0.1:8085/api/v1/servers
  url http://127.0.0.1:8085/api/v1/servers;
  # the id of device.
  # Overwrite by env SRS_HEARTBEAT_DEVICE_ID
  device_id "my-srs-device";
  # whether report with summaries
  # if on, put /api/v1/summaries to the request data:
  #   {
  #       "summaries": summaries object.
  #   }
  summaries off;
  # Whether report with listen ports.
  # if on, request with the ports of SRS:
  #   {
  #       "rtmp": ["1935"], "http": ["8080"], "api": ["1985"], "srt": ["10080"], "rtc": ["8000"]
  #   }
  ports off;
}

# system statistics section.
# the main cycle will retrieve the system stat,
# for example, the cpu/mem/network/disk-io data,
# the http api /api/v1/summaries will show these data.
stats {
  enabled on;
  # the device name to stat the disk iops.
  # ignore the device of /proc/diskstats if not configured.
  # disk sda sdb xvda xvdb;
}

#############################################################################################
# RTMP/HTTP VHOST sections
#############################################################################################
# vhost list, the __defaultVhost__ is the default vhost
# for example, user use ip to access the stream: rtmp://192.168.1.2/live/livestream.
# for which cannot identify the required vhost.
vhost __defaultVhost__ {
}

# the vhost scope configs.
vhost scope.vhost.srs.com {
  # whether the vhost is enabled.
  # if off, all request access denied.
  # default: on
  enabled off;

  # whether enable min delay mode for vhost.
  # for min latency mode:
  # 1. disable the publish.mr for vhost.
  # 2. use timeout for cond wait for consumer queue.
  # @see https://github.com/ossrs/srs/issues/257
  # default: off (for RTMP/HTTP-FLV)
  # default: on (for WebRTC)
  min_latency off;

  # whether enable the TCP_NODELAY
  # if on, set the nodelay of fd by setsockopt
  # Overwrite by env SRS_VHOST_TCP_NODELAY for all vhosts.
  # default: off
  tcp_nodelay off;

  # the default chunk size is 128, max is 65536,
  # some client does not support chunk size change,
  # vhost chunk size will override the global value.
  # Overwrite by env SRS_VHOST_CHUNK_SIZE for all vhosts.
  # default: global chunk size.
  chunk_size 128;

  # The input ack size, 0 to not set.
  # Generally, it's set by the message from peer,
  # but for some peer(encoder), it never send message but use a different ack size.
  # We can chnage the default ack size in server-side, to send acknowledge message,
  # or the encoder maybe blocked after publishing for some time.
  # Overwrite by env SRS_VHOST_IN_ACK_SIZE for all vhosts.
  # Default: 0
  in_ack_size 0;

  # The output ack size, 0 to not set.
  # This is used to notify the peer(player) to send acknowledge to server.
  # Overwrite by env SRS_VHOST_OUT_ACK_SIZE for all vhosts.
  # Default: 2500000
  out_ack_size 2500000;
}

# set the chunk size of vhost.
vhost chunksize.srs.com {
  # @see scope.vhost.srs.com
  chunk_size 128;
}

# the vhost disabled.
vhost removed.srs.com {
  # @see scope.vhost.srs.com
  enabled off;
}

# vhost for stream cluster for RTMP/FLV
vhost cluster.srs.com {
  # The config for cluster.
  cluster {
    # The cluster mode, local or remote.
    #       local: It's an origin server, serve streams itself.
    #       remote: It's an edge server, fetch or push stream to origin server.
    # default: local
    mode remote;

    # For edge(mode remote), user must specifies the origin server
    # format as: <server_name|ip>[:port]
    # @remark user can specifies multiple origin for error backup, by space,
    # for example, 192.168.1.100:1935 192.168.1.101:1935 192.168.1.102:1935
    origin 127.0.0.1:1935 localhost:1935;

    # For edge(mode remote), whether open the token traverse mode,
    # if token traverse on, all connections of edge will forward to origin to check(auth),
    # it's very important for the edge to do the token auth.
    # the better way is use http callback to do the token auth by the edge,
    # but if user prefer origin check(auth), the token_traverse if better solution.
    # default: off
    token_traverse off;

    # For edge(mode remote), the vhost to transform for edge,
    # to fetch from the specified vhost at origin,
    # if not specified, use the current vhost of edge in origin, the variable [vhost].
    # default: [vhost]
    vhost same.edge.srs.com;

    # For edge(mode remote), when upnode(forward to, edge push to, edge pull from) is srs,
    # it's strongly recommend to open the debug_srs_upnode,
    # when connect to upnode, it will take the debug info,
    # for example, the id, source id, pid.
    # please see https://ossrs.net/lts/zh-cn/docs/v4/doc/log
    # default: on
    debug_srs_upnode on;

    # For origin(mode local) cluster, turn on the cluster.
    # @remark Origin cluster only supports RTMP, use Edge to transmux RTMP to FLV.
    # default: off
    # TODO: FIXME: Support reload.
    origin_cluster off;

    # For origin (mode local) cluster, the co-worker's HTTP APIs.
    # This origin will connect to co-workers and communicate with them.
    # please see https://ossrs.io/lts/en-us/docs/v4/doc/origin-cluster
    # TODO: FIXME: Support reload.
    coworkers 127.0.0.1:9091 127.0.0.1:9092;

    # The protocol to connect to origin.
    #       rtmp, Connect origin by RTMP
    #       flv, Connect origin by HTTP-FLV
    #       flvs, Connect origin by HTTPS-FLV
    # Default: rtmp
    protocol rtmp;

    # Whether follow client protocol to connect to origin.
    # @remark The FLV might use different signature(in query string) to RTMP.
    # Default: off
    follow_client off;
  }
}
