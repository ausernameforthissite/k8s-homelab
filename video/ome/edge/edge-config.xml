<?xml version="1.0" encoding="UTF-8"?>

<Server version="8">
    <Name>OvenMediaEngine</Name>
    <!-- Host type (origin/edge) -->
    <Type>edge</Type>
    <!-- Specify IP address to bind (* means all IPs) -->
    <IP>*</IP>
    <PrivacyProtection>false</PrivacyProtection>
    <!-- 
    To get the public IP address(mapped address of stun) of the local server. 
    This is useful when OME cannot obtain a public IP from an interface, such as AWS or docker environment. 
    If this is successful, you can use ${PublicIP} in your settings.
    -->
    <!-- If the STUN server is not available, OME will hang for a minute at startup, therefor it may be beneficial to disable it -->
    <!-- <StunServer>stun.ovenmediaengine.com:13478</StunServer> -->

    <Modules>
        <!-- 
        Currently OME only supports h2 like all browsers do. Therefore, HTTP/2 only works on TLS ports.			
        -->
        <HTTP2>
            <Enable>true</Enable>
        </HTTP2>

        <LLHLS>
            <Enable>true</Enable>
        </LLHLS>

        <!-- P2P works only in WebRTC and is experiment feature -->
        <P2P>
            <!-- disabled by default -->
            <Enable>false</Enable>
            <MaxClientPeersPerHostPeer>2</MaxClientPeersPerHostPeer>
        </P2P>
    </Modules>

    <!-- Settings for the ports to bind -->
    <Bind>
        <!-- Enable this configuration if you want to use API Server -->
        <Managers>
            <API>
                <Port>${env:OME_API_PORT:8081}</Port>
                <WorkerCount>1</WorkerCount>
            </API>
        </Managers>
        <Providers>
            <!-- Pull providers -->
            <OVT>
                <WorkerCount>1</WorkerCount>
            </OVT>
        </Providers>

        <Publishers>
            <LLHLS>
                <!--
                OME only supports h2, so LLHLS works over HTTP/1.1 on non-TLS port. 
                Note that LLHLS runs higher performance over HTTP/2.
                Therefore, it is recommended to use TLS Port.
                -->
                <Port>${env:OME_LLHLS_STREAM_PORT:3333}</Port>
                <TLSPort>${env:OME_LLHLS_STREAM_TLS_PORT:3334}</TLSPort>
                <WorkerCount>1</WorkerCount>
            </LLHLS>
            <WebRTC>
                <Signalling>
                    <Port>${env:OME_WEBRTC_SIGNALLING_PORT:3333}</Port>
                    <TLSPort>${env:OME_WEBRTC_SIGNALLING_TLS_PORT:3334}</TLSPort>
                    <WorkerCount>1</WorkerCount>
                </Signalling>
                <IceCandidates>
                    <IceCandidate>${env:PublicIP:*}:${env:OME_WEBRTC_CANDIDATE_PORT:10000/udp}</IceCandidate>
                    <!--
                        IceCandidate must be a valid IP or a resolvable DNS
                        if OME is having troubles with DNS, it will hang on name resolution on startup, and then throuw out invalid addresses
                    -->
                    <!-- <IceCandidate>${env:OME_PUBLIC_ADDRESS:*}:${env:OME_WEBRTC_CANDIDATE_PORT:10000/udp}</IceCandidate> -->
                    <!-- <IceCandidate>${env:OME_LOCAL_ADDRESS:*}:${env:OME_WEBRTC_CANDIDATE_PORT:10000/udp}</IceCandidate> -->
                    <TcpRelay>${env:PublicIP:*}:${env:OME_WEBRTC_TCP_RELAY_PORT:3478}</TcpRelay>
                    <!-- TCP relay (== TURN server) doesn't use DNS resolution -->
                    <TcpRelay>${env:OME_PUBLIC_ADDRESS:*}:${env:OME_WEBRTC_TCP_RELAY_PORT:3478}</TcpRelay>
                    <TcpRelay>${env:OME_LOCAL_ADDRESS:*}:${env:OME_WEBRTC_TCP_RELAY_PORT:3478}</TcpRelay>
                    <!-- <TcpForce>true</TcpForce> -->
                    <TcpRelayWorkerCount>1</TcpRelayWorkerCount>
                </IceCandidates>
            </WebRTC>
            <Thumbnail>
                <Port>${env:OME_WEBRTC_SIGNALLING_PORT:3333}</Port>
                <!-- <TLSPort>20081</TLSPort> -->
            </Thumbnail>
        </Publishers>
    </Bind>

    <!-- P2P works only in WebRTC -->
    <!--
    <P2P>
        <MaxClientPeersPerHostPeer>2</MaxClientPeersPerHostPeer>
    </P2P>
    -->

    <Managers>
        <Host>
            <Names>
                <Name>*</Name>
            </Names>
            <!-- <TLS>
                <CertPath>airensoft_com.crt</CertPath>
                <KeyPath>airensoft_com.key</KeyPath>
                <ChainCertPath>airensoft_com_chain.crt</ChainCertPath>
            </TLS> -->
        </Host>
        <API>
            <AccessToken>your_access_token</AccessToken>
            <CrossDomains>
                <Url>*</Url>
            </CrossDomains>
        </API>
    </Managers>

    <VirtualHosts>
        <VirtualHost include="VHost*.xml" />
        <VirtualHost>
            <Name>default</Name>
            <!--Distribution is a value that can be used when grouping the same vhost distributed across multiple servers. This value is output to the events log, so you can use it to aggregate statistics. -->
            <Distribution>ovenmediaengine.com</Distribution>
            
            <!-- Settings for multi ip/domain and TLS -->
            <Host>
                <Names>
                    <Name>*</Name>
                </Names>
            </Host>

            <!-- Refer https://airensoft.gitbook.io/ovenmediaengine/signedpolicy
            <SignedPolicy>
                <PolicyQueryKeyName>${env:SIGNED_POLICY_POLICY_QUERY_KEY:policy}</PolicyQueryKeyName>
                <SignatureQueryKeyName>${env:SIGNED_POLICY_SIGNATURE_QUERY_KEY:signature}</SignatureQueryKeyName>
                <SecretKey>${env:SIGNED_URL_CRYPTO_KEY:aKq#1kj}</SecretKey>

                <Enables>
                    <Providers>rtmp,webrtc,srt</Providers>
                    <Publishers>webrtc,hls,llhls,dash,lldash</Publishers>
                </Enables>
            </SignedPolicy>
            -->

            <!-- Settings for ProxyPass (It can specify origin for each path) -->
            <Origins>
                <Properties>
                    <!-- default is 3000 ms -->
                    <NoInputFailoverTimeout>10</NoInputFailoverTimeout>
                    <!-- default is 60000 ms -->
                    <!-- 86400000 ms is 1 day -->
                    <UnusedStreamDeletionTimeout>86400000</UnusedStreamDeletionTimeout>
                </Properties>
                <!--
                    <Origin>
                    <Location>/app/stream</Location>
                    <Pass>
                        <Scheme>ovt</Scheme>
                        <Urls>
                            <Url>origin.com:9000/app/stream_720p</Url>
                        </Urls>
                    </Pass>
                </Origin>
                <Origin>
                    <Location>/app/</Location>
                    <Pass>
                        <Scheme>ovt</Scheme>
                        <Urls>
                            <Url>origin.com:9000/app/</Url>
                        </Urls>
                    </Pass>
                </Origin>
                -->
                <!-- <Origin>
                    <Location>/</Location>
                    <Pass>
                        <Scheme>ovt</Scheme>
                        <Urls>
                            <Url>${env:DEFAULT_ORIGIN_SERVER:}:${env:DEFAULT_ORIGIN_PORT:9000}/</Url>
                        </Urls>
                        <ForwardQueryParams>true</ForwardQueryParams>
                    </Pass>
                </Origin> -->
            </Origins>

            <!-- When Edge tries to pull a stream, it looks first in <Origins> in its local config, -->
            <!-- When local Origins aren't found, it looks in the OriginMapStore. -->
            <!-- Therefore, it is recommended to disable Origins when using OriginMapStore. -->
            <!-- In order to use OriginMap, you must enable OVT Publisher in Origin and OVT Provider in Edge. -->
            <OriginMapStore>
                <RedisServer>
                    <Host>${env:REDIS_SERVICE:redis}:${env:REDIS_PORT:6379}</Host>
                    <Auth>${env:REDIS_PASS}</Auth>
                </RedisServer>
            </OriginMapStore>

            <!-- Default CORS Settings -->
            <CrossDomains>
                <Url>*</Url>
            </CrossDomains>

            <Applications>
                <Application>
                    <!-- 
                    Origins and OriginMapStore can dynamically create an application if no application exists 
                    when creating a stream. They create a new application by copying the Application configuration 
                    where <Name> is *. 
                    In other words, an application with <Name> as * serves as a dynamic application template.
                    -->
                    <Name>*</Name>
                    <Type>live</Type>
                    <Providers>
                        <OVT />
                    </Providers>
                    <Publishers>
                        <AppWorkerCount>1</AppWorkerCount>
                        <StreamWorkerCount>8</StreamWorkerCount>
                        <WebRTC>
                            <Timeout>30000</Timeout>
                            <Rtx>false</Rtx>
                            <Ulpfec>false</Ulpfec>
                            <JitterBuffer>false</JitterBuffer>
                        </WebRTC>
                        <LLHLS>
                            <OriginMode>true</OriginMode>
                            <!--
                            <CacheControl>
                                <MasterPlaylistMaxAge>0</MasterPlaylistMaxAge>
                                <ChunklistMaxAge>0</ChunklistMaxAge>
                                <ChunklistWithDirectivesMaxAge>60</ChunklistWithDirectivesMaxAge>
                                <SegmentMaxAge>-1</SegmentMaxAge>
                                <PartialSegmentMaxAge>-1</PartialSegmentMaxAge>
                            </CacheControl>
                            -->
                            <ChunkDuration>0.5</ChunkDuration>
                            <!-- PartHoldBack SHOULD be at least three times the Part Target Duration -->
                            <PartHoldBack>1.5</PartHoldBack>
                            <SegmentDuration>6</SegmentDuration>
                            <SegmentCount>10</SegmentCount>
                            <CrossDomains>
                                <Url>*</Url>
                            </CrossDomains>
                        </LLHLS>
                    </Publishers>
                </Application>



                <Application>
                    <Name>tc</Name>
                    <Type>live</Type>
                    <Providers>
                        <OVT />
                    </Providers>
                    <Publishers>
                        <AppWorkerCount>1</AppWorkerCount>
                        <StreamWorkerCount>8</StreamWorkerCount>
                        <WebRTC>
                            <Timeout>300</Timeout>
                            <Rtx>false</Rtx>
                            <Ulpfec>false</Ulpfec>
                            <JitterBuffer>false</JitterBuffer>
                        </WebRTC>
                        <LLHLS>
                            <OriginMode>true</OriginMode>
                            <!--
                            <CacheControl>
                                <MasterPlaylistMaxAge>0</MasterPlaylistMaxAge>
                                <ChunklistMaxAge>0</ChunklistMaxAge>
                                <ChunklistWithDirectivesMaxAge>60</ChunklistWithDirectivesMaxAge>
                                <SegmentMaxAge>-1</SegmentMaxAge>
                                <PartialSegmentMaxAge>-1</PartialSegmentMaxAge>
                            </CacheControl>
                            -->
                            <ChunkDuration>0.5</ChunkDuration>
                            <!-- PartHoldBack SHOULD be at least three times the Part Target Duration -->
                            <PartHoldBack>1.5</PartHoldBack>
                            <SegmentDuration>6</SegmentDuration>
                            <SegmentCount>10</SegmentCount>
                            <CrossDomains>
                                <Url>*</Url>
                            </CrossDomains>
                        </LLHLS>
                    </Publishers>
                </Application>
            </Applications>
        </VirtualHost>
    </VirtualHosts>
</Server>
