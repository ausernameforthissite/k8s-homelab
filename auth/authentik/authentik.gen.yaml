---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authentik
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "serviceAccount"
    app.kubernetes.io/instance: "authentik"
---
apiVersion: v1
kind: Secret
metadata:
  name: authentik
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "authentik"
    app.kubernetes.io/instance: "authentik"
data:  
  AUTHENTIK_EMAIL__FROM: "QVVUT1JFUExBQ0VfU01UUF9GUk9N"
  AUTHENTIK_EMAIL__HOST: "QVVUT1JFUExBQ0VfU01UUF9IT1NU"
  AUTHENTIK_EMAIL__PASSWORD: "QVVUT1JFUExBQ0VfU01UUF9QQVNTV09SRA=="
  AUTHENTIK_EMAIL__PORT: "QVVUT1JFUExBQ0VfU01UUF9QT1JU"
  AUTHENTIK_EMAIL__TIMEOUT: "MzA="
  AUTHENTIK_EMAIL__USE_SSL: "ZmFsc2U="
  AUTHENTIK_EMAIL__USE_TLS: "ZmFsc2U="
  AUTHENTIK_EMAIL__USERNAME: "QVVUT1JFUExBQ0VfU01UUF9VU0VSTkFNRQ=="
  AUTHENTIK_ENABLED: "dHJ1ZQ=="
  AUTHENTIK_ERROR_REPORTING__ENABLED: "ZmFsc2U="
  AUTHENTIK_ERROR_REPORTING__ENVIRONMENT: "azhz"
  AUTHENTIK_ERROR_REPORTING__SEND_PII: "ZmFsc2U="
  AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__ASN: "L2dlb2lwL0dlb0xpdGUyLUFTTi5tbWRi"
  AUTHENTIK_EVENTS__CONTEXT_PROCESSORS__GEOIP: "L2dlb2lwL0dlb0xpdGUyLUNpdHkubW1kYg=="
  AUTHENTIK_LOG_LEVEL: "aW5mbw=="
  AUTHENTIK_OUTPOSTS__CONTAINER_IMAGE_BASE: "Z2hjci5pby9nb2F1dGhlbnRpay8lKHR5cGUpczolKHZlcnNpb24pcw=="
  AUTHENTIK_POSTGRESQL__HOST: "cG9zdGdyZXM="
  AUTHENTIK_POSTGRESQL__NAME: "YXV0aGVudGlr"
  AUTHENTIK_POSTGRESQL__PASSWORD: "QVVUT1JFUExBQ0VfUE9TVEdSRVNfUEFTU1dPUkQ="
  AUTHENTIK_POSTGRESQL__PORT: "NTQzMg=="
  AUTHENTIK_POSTGRESQL__USER: "YXV0aGVudGlr"
  AUTHENTIK_REDIS__HOST: "cmVkaXMtbWFzdGVy"
  AUTHENTIK_REDIS__PASSWORD: "QVVUT1JFUExBQ0VfUkVESVNfUEFTU1dPUkQ="
  AUTHENTIK_SECRET_KEY: "QVVUT1JFUExBQ0VfQVVUSEVOVElLX1NFRUQ="
  AUTHENTIK_WEB__PATH: "Lw=="
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "authentik-authentik"
  labels:
    app.kubernetes.io/name: "serviceAccount"
    app.kubernetes.io/instance: "authentik"
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "authentik-authentik"
  labels:
    app.kubernetes.io/name: "serviceAccount"
    app.kubernetes.io/instance: "authentik"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "authentik-authentik"
subjects:
  - kind: ServiceAccount
    name: authentik
    namespace: "authentik"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: authentik
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "serviceAccount"
    app.kubernetes.io/instance: "authentik"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
      - services
      - configmaps
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - extensions
      - apps
    resources:
      - deployments
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - traefik.containo.us
      - traefik.io
    resources:
      - middlewares
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
      - create
      - delete
      - list
      - patch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authentik
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "serviceAccount"
    app.kubernetes.io/instance: "authentik"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: authentik
subjects:
  - kind: ServiceAccount
    name: authentik
    namespace: "authentik"
---
apiVersion: v1
kind: Service
metadata:
  name: authentik-server
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "authentik"
    app.kubernetes.io/instance: "authentik"
    app.kubernetes.io/component: "server"
spec:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 9000
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
  selector:
    app.kubernetes.io/name: "authentik"
    app.kubernetes.io/instance: "authentik"
    app.kubernetes.io/component: "server"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-server
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "authentik"
    app.kubernetes.io/instance: "authentik"
    app.kubernetes.io/component: "server"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: "authentik"
      app.kubernetes.io/instance: "authentik"
      app.kubernetes.io/component: "server"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "authentik"
        app.kubernetes.io/instance: "authentik"
        app.kubernetes.io/component: "server"
      annotations:
        checksum/secret: 1edf981c2cce17872ee8052074ae153c57f4b5539ec70acb33ea5d0056ad5f91
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: server
          image: ghcr.io/goauthentik/server:2025.8.1
          imagePullPolicy: IfNotPresent
          args:
            - server
          env:
            - name: AUTHENTIK_LISTEN__HTTP
              value: "0.0.0.0:9000"
            - name: AUTHENTIK_LISTEN__HTTPS
              value: "0.0.0.0:9443"
            - name: AUTHENTIK_LISTEN__METRICS
              value: "0.0.0.0:9300"
          envFrom:
            - secretRef:
                name: authentik
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: https
              containerPort: 9443
              protocol: TCP
            - name: metrics
              containerPort: 9300
              protocol: TCP
          livenessProbe:
            
            failureThreshold: 10
            httpGet:
              path: '/-/health/live/'
              port: http
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            
            failureThreshold: 3
            httpGet:
              path: '/-/health/ready/'
              port: http
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 3
          startupProbe:
            
            failureThreshold: 60
            httpGet:
              path: '/-/health/live/'
              port: http
            initialDelaySeconds: 1
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: "authentik"
                    app.kubernetes.io/instance: "authentik"
                    app.kubernetes.io/component: "server"
                topologyKey: kubernetes.io/hostname
      enableServiceLinks: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-worker
  namespace: "authentik"
  labels:
    app.kubernetes.io/name: "authentik"
    app.kubernetes.io/instance: "authentik"
    app.kubernetes.io/component: "worker"
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: "authentik"
      app.kubernetes.io/instance: "authentik"
      app.kubernetes.io/component: "worker"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "authentik"
        app.kubernetes.io/instance: "authentik"
        app.kubernetes.io/component: "worker"
      annotations:
        checksum/secret: 1edf981c2cce17872ee8052074ae153c57f4b5539ec70acb33ea5d0056ad5f91
    spec:
      serviceAccountName: authentik
      terminationGracePeriodSeconds: 30
      containers:
        - name: worker
          image: ghcr.io/goauthentik/server:2025.8.1
          imagePullPolicy: IfNotPresent
          args:
            - worker
          env:
            - name: AUTHENTIK_LISTEN__HTTP
              value: "0.0.0.0:9000"
            - name: AUTHENTIK_LISTEN__METRICS
              value: "0.0.0.0:9300"
          envFrom:
            - secretRef:
                name: authentik
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: metrics
              containerPort: 9300
              protocol: TCP
          livenessProbe:
            
            exec:
              command:
              - ak
              - healthcheck
            failureThreshold: 10
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            
            exec:
              command:
              - ak
              - healthcheck
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 3
          startupProbe:
            
            exec:
              command:
              - ak
              - healthcheck
            failureThreshold: 60
            initialDelaySeconds: 1
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: "authentik"
                    app.kubernetes.io/instance: "authentik"
                    app.kubernetes.io/component: "worker"
                topologyKey: kubernetes.io/hostname
      enableServiceLinks: true
